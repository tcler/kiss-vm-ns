# vm(1) completion                                         -*- shell-script -*-

. /etc/profile.d/bash_completion.sh || :
IFS=$' \t\n'

prog=$(basename $BASH_SOURCE)
_downhost=download.devel.fedorahat.com

is_available_url() {
	local _url=$1
	curl --connect-timeout 4 -m 4 --output /dev/null -k --silent --head --fail $_url &>/dev/null
}
is_rh_intranet() { host ipa.corp.redhat.com &>/dev/null; }
is_rh_intranet2() { grep -q redhat.com /etc/resolv.conf || is_rh_intranet; }

option_arg_complete() {
    local hasarg=$1
    local opt=${hasarg:-$prev}
    case $opt in
    -i|-l|-C|--xcdrom|--disk|--win-openssh|--win-download-url|--win-virtio-drv|--ks|--to-disk)
        [[ -n "$hasarg" ]] && return 0
        #COMPREPLY=( $( compgen -A file -- "$cur" ) )
        _filedir
        ;;
    --diskbus|--bus)
        [[ -n "$hasarg" ]] && return 0
        COMPREPLY=( $( compgen -W "ide sata scsi virtio" -- "$cur" ) )
        ;;
    --if-model|--win-if-model)
        [[ -n "$hasarg" ]] && return 0
        COMPREPLY=( $( compgen -W "e1000 rtl8139 virtio" -- "$cur" ) )
        ;;
    --net)
        [[ -n "$hasarg" ]] && return 0
        COMPREPLY=( $( compgen -W "$(virsh net-list --name)" -- "$cur" ) )
        ;;
    --video)
        [[ -n "$hasarg" ]] && return 0
        COMPREPLY=( $( compgen -W "auto virtio vga qxl cirrus" -- "$cur" ) )
        ;;
    --sound)
        [[ -n "$hasarg" ]] && return 0
        COMPREPLY=( $( compgen -W "ich6 ich9 ac97 es1370 sb16 pcspk default" -- "$cur" ) )
        ;;
    --graphics)
        [[ -n "$hasarg" ]] && return 0
        COMPREPLY=( $( compgen -W "vnc, spice, none" -- "$cur" ) )
        ;;
    --arch)
        [[ -n "$hasarg" ]] && return 0
        archlist=$(ls /usr/bin/qemu-system-* |& awk -F- 'NF==3{a=$3; if(a=="ppc64")a="ppc64le"; print a}')
        COMPREPLY=( $( compgen -W "$archlist" -- "$cur" ) )
        ;;
    --virt-type)
        [[ -n "$hasarg" ]] && return 0
        vtypelist="qemu kvm xen"
        COMPREPLY=( $( compgen -W "$vtypelist" -- "$cur" ) )
        ;;
    -n|--vmname)
        [[ -n "$hasarg" ]] && return 0
        COMPREPLY=( $( compgen -W "#vmname arch-fixme rhel-fixme centos-fixme rocky-fixme alma-fixme debian-fixme
                        win-fixme freebsd-fixme tmpvm nfs-serv opensuse-fixme slack-fixme " -- "$cur" ) )
        ;;
    *)
        [[ -n "$hasarg" ]] && return 1
        COMPREPLY=( $( compgen -W "${opts[*]}" -- "$cur" ) )
        ;;
    esac
}

distro_list_complete() {
    local distroList=() dlist=() intranet=
    distroList=( fedora $(source /etc/kiss-vm-ns/distro-db.bash;
                    printf "%s\n" ${!distroInfo[@]};
                    printf "%s\n" ${!distroInfo[@]} | sed -rn '/(RHEL|centos)-?/I{s///;s/[-.].*$//;p}' | sort -u) )
    dlist=( "${distroList[@]}" "#<aDistroFamilyName>" "#<Enter>" )
    COMPREPLY=( $( compgen -W "${dlist[*]}" -- "$cur" ) )
}

_vm()
{
    local w= cur= prev= words= cword= ocur= pprev= p3rev=
    local narg=0
    local subcommandList=()
    local vmlist=
    local netparams= netlist=
    _init_completion || return

    subcommandList=(prepare enable-nested-vm help h create ls list clone port-available login console qmp monitor rm delete ifaddr iflist if.unplugin if.plugin viewer vncproc xml edit exec restart reboot stop start autostart noautostart stat blklist netls netcreate netinfo netdel netstart cpfrom cpto rootdir homedir add.iso add.disk add.if add.if.bridge add.if.direct add.if.passthru snapshot)

    for ((i=0; i<${#words[@]}; i++)); do
        w=${words[$i]}
        if option_arg_complete $w; then
            let i++
            continue
        elif [[ "$w" != -* ]]; then
            let narg++
        fi
    done
    local opts=( $( _parse_help "$1" ) -h -n -L= -I=)
    ocur=$cur

    [[ $cur = -* ]] && { let narg++; }
    if [[ $narg -le 2 ]]; then
        if [[ "$cur" != -* ]]; then
            if option_arg_complete $prev; then
                 option_arg_complete
            elif [[ ${words[1]} = create ]]; then
                distro_list_complete
            elif [[ $prev = vm ]]; then
                COMPREPLY=( $( compgen -W "${subcommandList[*]}" -- "$cur" ) )
            fi
        else
            COMPREPLY=( $( compgen -W "${opts[*]}" -- "$cur" ) )
        fi
    else
        pprev=${words[-2]}
        p3rev=${words[-3]}
        [[ $cur = -* ]] && { let narg--; }
        case "${words[1]}" in
        create)
            if [[ $narg -le 3 ]]; then
                if option_arg_complete $prev; then
                    option_arg_complete
                elif [[ "$cur" == -* ]]; then
                    COMPREPLY=( $( compgen -W "${opts[*]}" -- "$cur" ) )
                else
                    distro_list_complete
                fi
            else
                #weird but works
                if [[ "${prev}" == -[IL]* && -n "$cur" ]] || [[ "$p3rev" = -[IL] && "$prev" = = ]]; then
                    cur=${cur#*=}
                    _filedir
                else
                    option_arg_complete
                fi
            fi
            ;;
        rm|del|delete|stop|autos*|noautos*|start|stat|blk*|srcfiles|homedir|iflist|ifl*)
            vmlist=$(virsh list --all --name 2>/dev/null)
            COMPREPLY=( $( compgen -W "$vmlist" -- "$cur" ) )
            ;;
        reboot|restart)
            vmlist=$(virsh list --all --name 2>/dev/null)
            COMPREPLY=( $( compgen -W "-w $vmlist" -- "$cur" ) )
            ;;
        clone)
            if [[ $narg -le 3 ]]; then
                vmlist=$(virsh list --all --name 2>/dev/null)
                COMPREPLY=( $( compgen -W "$vmlist" -- "$cur" ) )
            elif [[ $narg -le 4 ]]; then
                COMPREPLY=( $( compgen -W "#new-vm-name" -- "$cur" ) )
            else
                COMPREPLY=( $( compgen -W "#<Enter>" -- "$cur" ) )
            fi
            ;;
        if.unplug*|if.u*|if.plug*|if.p*)
            if [[ $narg -le 3 ]]; then
                vmlist=$(virsh list --all --name 2>/dev/null)
                COMPREPLY=( $( compgen -W "$vmlist" -- "$cur" ) )
            elif [[ $narg -le 4 ]]; then
                _iflist="$(seq $(vm iflist ${words[2]} 2>/dev/null|wc -l))"
                COMPREPLY=( $( compgen -W "$_iflist" -- "${cur}" ) )
            else
                COMPREPLY=( $( compgen -W "#<Enter>" -- "$cur" ) )
            fi
            ;;
        add.iso|add.disk)
            if [[ $narg -le 3 ]]; then
                vmlist=$(virsh list --all --name 2>/dev/null)
                COMPREPLY=( $( compgen -W "$vmlist" -- "$cur" ) )
            elif [[ $narg -le 4 ]]; then
                #COMPREPLY=( $( compgen -A file -- "${cur}" ) )
                _filedir
            else
                COMPREPLY=( $( compgen -W "#<Enter>" -- "$cur" ) )
            fi
            ;;
        add.if)
            if [[ $narg -le 3 ]]; then
                vmlist=$(virsh list --all --name 2>/dev/null)
                COMPREPLY=( $( compgen -W "$vmlist" -- "$cur" ) )
            elif [[ $narg -le 4 ]]; then
                netlist="$(virsh net-list --name --all 2>/dev/null)"
                COMPREPLY=( $( compgen -W "$netlist" -- "${cur}" ) )
            else
                COMPREPLY=( $( compgen -W "#<Enter>" -- "$cur" ) )
            fi
            ;;
        add.if.bridge)
            if [[ $narg -le 3 ]]; then
                vmlist=$(virsh list --all --name 2>/dev/null)
                COMPREPLY=( $( compgen -W "$vmlist" -- "$cur" ) )
            elif [[ $narg -le 4 ]]; then
                brgs=$(bridge link show | awk -F'[ :]+' '{print $2}')
                COMPREPLY=( $( compgen -W "#<Enter> $brgs" -- "${cur}" ) )
            fi
            ;;
        add.if.direct)
            if [[ $narg -le 3 ]]; then
                vmlist=$(virsh list --all --name 2>/dev/null)
                COMPREPLY=( $( compgen -W "$vmlist" -- "$cur" ) )
            elif [[ $narg -le 4 ]]; then
                ifaces=$(ip route | awk '/^default/{print $5}')
                COMPREPLY=( $( compgen -W "#<Enter> $ifaces" -- "${cur}" ) )
            fi
            ;;
        add.if.passthr*)
            if [[ $narg -le 3 ]]; then
                vmlist=$(virsh list --all --name 2>/dev/null)
                COMPREPLY=( $( compgen -W "$vmlist" -- "$cur" ) )
            elif [[ $narg -le 4 ]]; then
                hostifs=$(for if in /sys/class/net/*; do [[ -f $if/device/uevent ]] && echo ${if##*/} ; done)
                COMPREPLY=( $( compgen -W "#<Enter> $hostifs" -- "${cur}" ) )
            fi
            ;;
        sna|snap*)
            if [[ $narg -le 3 ]]; then
                vmlist=$(virsh list --all --name 2>/dev/null)
                COMPREPLY=( $( compgen -W "$vmlist" -- "$cur" ) )
            elif [[ $narg -le 4 ]]; then
                subcmds="help create ls revert delete"
                COMPREPLY=( $( compgen -W "$subcmds" -- "${cur}" ) )
            elif [[ $narg -le 5 ]] && [[ "$prev" = del* || "$prev" = rev* ]]; then
                snaplist=$(virsh snapshot-list --parent "${word[3]}")
                COMPREPLY=( $( compgen -W "$snaplist" -- "${cur}" ) )
            fi
            ;;
        vi|vie|view*|qmp|mon|moni*|if|ifaddr|port*)
            if [[ $narg -le 3 ]]; then
                vmlist=$(virsh list --name 2>/dev/null)
                COMPREPLY=( $( compgen -W "$vmlist" -- "$cur" ) )
            else
                COMPREPLY=( $( compgen -W "#<Enter>" -- "$cur" ) )
            fi
            ;;
        x|xm|xml|ed|edit)
            if [[ $narg -le 3 ]]; then
                vmlist=$(virsh list --all --name 2>/dev/null)
                COMPREPLY=( $( compgen -W "$vmlist" -- "$cur" ) )
            else
                COMPREPLY=( $( compgen -W "#<Enter>" -- "$cur" ) )
            fi
            ;;
        vn|vnc*)
            if [[ $narg -le 3 ]]; then
                if [[ "$cur" == -* ]]; then
                    COMPREPLY=( $( compgen -W "#<Enter> --getsc --get --put --putln --invert --ocr-tool --threshold" -- "$cur" ) )
                else
                    vmlist=$(virsh list --name 2>/dev/null)
                    COMPREPLY=( $( compgen -W "$vmlist" -- "$cur" ) )
                fi
            else
                if [[ ${words[$((cword-1))]} = --ocr-tool ]]; then
                    COMPREPLY=( $( compgen -W "tesseract gocr" -- "$cur" ) )
                elif [[ ${words[$((cword-1))]} = --threshold ]]; then
                    COMPREPLY=( $( compgen -W "70% 50% 30%" -- "$cur" ) )
                else
                    COMPREPLY=( $( compgen -W "#<Enter> --getsc --get --put --putln --invert --ocr-tool --threshold" -- "$cur" ) )
                fi
            fi
            ;;
        cpfrom)
            if [[ $narg -le 3 ]]; then
                vmlist=$(virsh list --name 2>/dev/null)
                COMPREPLY=( $( compgen -W "$vmlist" -- "$cur" ) )
            elif [[ $narg -le 4 ]]; then
                COMPREPLY=( $( compgen -W "# #<file-or-dir-in-vm>" -- "$cur" ) )
            else
                #COMPREPLY=( $( compgen -A file -- "$cur" ) )
                _filedir
            fi
            ;;
        cpto)
            if [[ $narg -le 3 ]]; then
                vmlist=$(virsh list --name 2>/dev/null)
                COMPREPLY=( $( compgen -W "$vmlist" -- "$cur" ) )
            else
                #COMPREPLY=( $( compgen -A file -- "$cur" ) )
                _filedir
            fi
            ;;
        lo|log|log*)
            if [[ $narg -le 4 ]]; then
                vmlist=$(virsh list --name 2>/dev/null)
                COMPREPLY=( $( compgen -W "$vmlist -u --user" -- "$cur" ) )
                if [[ "$prev" == -u || "$prev" == --user ]]; then
                    COMPREPLY=( $( compgen -W "foo bar #username[:password]" -- "$cur" ) )
                elif [[ $narg = 4 ]]; then
                    COMPREPLY=( $( compgen -W "-u --user #<Enter>" -- "$cur" ) )
                    if [[ ${words[$((cword-2))]} = *-u* ]]; then
                        COMPREPLY=( $( compgen -W "$vmlist" -- "$cur" ) )
                    fi
                fi
            else
                COMPREPLY=( $( compgen -W "#<Enter>" -- "$cur" ) )
            fi
            ;;
        co|con|cons*)
            if [[ $narg -le 3 ]]; then
                vmlist=$(virsh list --name --state-running 2>/dev/null)
                COMPREPLY=( $( compgen -W "${vmlist:-#No-Running-Guest} -f --force" -- "$cur" ) )
            elif [[ $narg -le 4 ]]; then
                COMPREPLY=( $( compgen -W "#<Enter> -f --force" -- "${cur}" ) )
            fi
            ;;
        e|ex|exe|exec)
            if [[ $narg -le 4 ]]; then
                vmlist=$(virsh list --name --state-running 2>/dev/null)
                COMPREPLY=( $( compgen -W "$vmlist -v -x -u --user" -- "$cur" ) )
                if [[ "$prev" == -u || "$prev" == --user ]]; then
                    COMPREPLY=( $( compgen -W "foo bar #username[:password]" -- "$cur" ) )
                elif [[ $narg = 4 ]]; then
                    COMPREPLY=( $( compgen -W "-x -v -u --user -- #<cmd>" -- "$cur" ) )
                    if [[ ""${words[*]}"" == *\ --\ * ]]; then
                        for ((i = 1; i <= COMP_CWORD; i++)); do
                            if [[ ${COMP_WORDS[i-1]} = -- ]]; then
                                _command_offset $i
                                return
                            fi
                        done
                    elif [[ "${words[*]}" =~ (-u|--user)[\ =][A-Za-z0-9]+ ]]; then
                        COMPREPLY=( $( compgen -W "$vmlist -x -v --" -- "$cur" ) )
                    fi
                fi
            else
                COMPREPLY=( $( compgen -W "-x -v --" -- "$cur" ) )
                if [[ ""${words[*]}"" == *\ --\ * ]]; then
                    for ((i = 1; i <= COMP_CWORD; i++)); do
                        if [[ ${COMP_WORDS[i-1]} = -- ]]; then
                            _command_offset $i
                            return
                        fi
                    done
                fi
            fi
            ;;
        netc*)
            netparams="netname=fixme brname=virbr-fixme subnet=192.168.fixme.0 subnet=172.25.fixme.0 \
                forward=no forward=nat domain=fixme tftproot= bootpfile= dhcphosts={mac}@{ip}[,{mac}@{ip}] #<netname=_and_brname=_is_necessary>"
            COMPREPLY=( $( compgen -W "$netparams" -- "$cur" ) )
            ;;
        netinfo)
            netlist="$(virsh net-list --name --all 2>/dev/null)"
            COMPREPLY=( $( compgen -W "$netlist" -- "$cur" ) )
            ;;
        netdel|netstart)
            netlist="$(virsh net-list --name --all 2>/dev/null)"
            COMPREPLY=( $( compgen -W "$netlist" -- "$cur" ) )
            ;;
        prepare)
            COMPREPLY=( $( compgen -W "#<Enter> --user" -- "$cur" ) )
            if [[ "$prev" == -u || "$prev" == --user ]]; then
                users=$(awk -v u=$LOGNAME -F: '$NF ~ /.*bash/ {if ($1!="root"&&$1!=u) print $1}' /etc/passwd)
                COMPREPLY=( $( compgen -W "$users" -- "$cur" ) )
            fi
            ;;
        ls|list)
            lsOpts=$(LANG=C virsh list --help|awk '$1 ~ "^--" {print gensub("--", "/", 1, $1)}')
            COMPREPLY=( $( compgen -W "/help $lsOpts" -- "$cur" ) )
            ;;
        netls|enable-nested-vm|h|help|rootdir)
            COMPREPLY=( $( compgen -W "#<Enter>" -- "$cur" ) )
            ;;
        *)
            COMPREPLY=( $( compgen -W "#Warning:wrong-subcommand-name" -- "$cur" ) )
            ;;
        esac
    fi
} &&
complete -F _vm $prog

#echo $prog
# ex: ts=4 sw=4 et filetype=sh

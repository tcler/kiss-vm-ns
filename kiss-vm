#!/usr/bin/env bash
# author: yin-jianhong@163.com
# test pass on RHEL-7/CentOS-7, RHEL-8/CentOS-8 RHEL-9/CentOS-9s and Fedora-{29..36}
#
# inspired by https://www.brianlinkletter.com/2019/02/build-a-network-emulator-using-libvirt/
# `and inspired by Red Hat traning Virtual Lab

LANG=C
PATH=~/bin:$PATH 

P=$0; [[ $0 = /* ]] && P=${0##*/}
_repon=kiss-vm-ns
_confdir=/etc/$_repon
Distro=
Location=
Imageurl=
VM_OS_VARIANT=
OVERWRITE=no
KSPath=
ksauto=
MacvtapMode=bridge
VMName=
InstallType=import
VirtInstallTimeOut=64

VMUSER=$(whoami)
[[ $(id -u) = 0 && -n "$SUDO_USER" ]] && VMUSER=$SUDO_USER
eval VMSHOME=~$VMUSER/VMs
eval ImagePath=~$VMUSER/myimages
eval perConfDir=~$VMUSER/.config/${_repon}
eval oldperConfDir=~$VMUSER/.config/kiss-vm

RuntimeTmp=/tmp/vm-$$
INTERACT=yes
Intranet=yes
VIRT_READY=unkown
_MSIZE=1536
DSIZE=64
baudrate=115200
GRAPHICS_OPT="--graphics=vnc,listen=0.0.0.0"
HostARCH=$(uname -m)
VIDEO_OPT="--video=qxl"
SOUND_OPT=""
QEMU_OPTS=()
QEMU_ENV=()
_downhostname="download.devel.fedorahat.com"
downhostname=${_downhostname/fedora/red}
baseUrl=http://$downhostname/qa/rhts/lookaside/kiss-vm-ns
bkrClientImprovedUrl=http://$downhostname/qa/rhts/lookaside/bkr-client-improved
VCPUS=4,sockets=1,cores=4
DEFAULT_DISK_BUS=virtio
DEFAULT_IF_MODEL=virtio
defaultPasswd=redhat
defaultWindowsPasswd=Sesame~0pen
orig_disable_ipv6=$(/sbin/sysctl -n net.ipv6.conf.all.disable_ipv6)
{ QEMU_USER=qemu; id ${QEMU_USER} &>/dev/null || QEMU_USER=libvirt-qemu; }

quote() {
	local at=$1
	if [[ -z "$at" ]]; then
		echo -n "'' "
	elif [[ "$at" =~ [^[:print:]]+ || "$at" = *$'\t'* || "$at" = *$'\n'* ]]; then
		builtin printf %q "$at"; echo -n " "
	elif [[ "$at" =~ "'" && ! "$at" =~ ([\`\"$]+|\\\\) ]]; then
		echo -n "\"$at\" "
	else
		echo -n "$at" | sed -r -e ':a;$!{N;ba};' \
			-e "s/'+/'\"&\"'/g" -e "s/^/'/" -e "s/$/' /" \
			-e "s/^''//" -e "s/'' $/ /"
	fi
}
getReusableCommandLine() {
	#if only one parameter, treat it as a piece of script
	[[ $# = 1 ]] && { echo "$1"; return; }

	local shpattern='^[][0-9a-zA-Z~@%^_+=:,./-]+$'

	for at; do
		if [[ "$at" =~ $shpattern ]]; then
			echo -n "$at "
		else
			quote "$at"
		fi
	done
	echo
}

run() {
	#ref: https://superuser.com/questions/927544/run-command-in-detached-tmux-session-and-log-console-output-to-file
	local _runtype= _debug= _rc=0
	local _nohup= _nohuplogf=
	local _user= _SUDO=
	local _default_nohuplogf=${VMpath:-.}/nohup.log
	local _tmuxSession= _tmuxlogf=

	while true; do
		case "$1" in
		-d|-debug) _debug=yes; shift;;
		-eval*) _runtype=eval; shift;;
		-bash*) _runtype=bash; shift;;
		-tmux*) _runtype=tmux;
			[[ $1 = *=* ]] && _tmuxSession=${1#*=}
			_tmuxSession=${_tmuxSession:-$$-${USER}}
			_tmuxlogf=${VMpath:-/tmp}/run-tmux-${_tmuxSession}.log
			shift;;
		-nohu*) _nohup=yes
			[[ $1 = *=* ]] && _nohuplogf=${1#*=}
			_nohuplogf=${_nohuplogf:-$_default_nohuplogf}
			shift;;
		-as=*)  _U=${1#*=}; [[ "$_U" = "$USER" ]] || _SUDO="sudo -u $_U"; shift;;
		-*)     shift;;
		*)      break;;
		esac
	done

	[[ $# -eq 0 ]] && return 0
	[[ $# -eq 1 && -z "$_runtype" ]] && _runtype=eval
	[[ "${_runtype}" = eval && -n "$_SUDO" ]] && _SUDO+=\ -s
	local _cmdl=$(getReusableCommandLine "$@")
	local _cmdlx=

	if [[ "$_debug" = yes ]]; then
		_cmdlx=$_cmdl
		if [[ "${_runtype}" = tmux ]]; then
			_cmdlx="tmux new -s $_tmuxSession -d \"$_cmdl\" \\; pipe-pane \"cat >$_tmuxlogf\""
		elif [[ "$_nohup" = yes ]]; then
			_cmdlx="nohup $_cmdl &>${_nohuplogf} &"
		fi
		[[ -n "$_SUDO" ]] && _cmdlx="[$_SUDO] $_cmdlx"
		echo $'\E[0;33;44m'"[${_runtype:-plat} run] $_cmdlx"$'\E[0m'
	fi

	case ${_runtype:-plat} in
	plat)
		if [[ -n "$_nohup" ]]; then
			$_SUDO touch "${_nohuplogf}"
			$_SUDO nohup "$@" &>${_nohuplogf} &
		else
			$_SUDO "$@"; _rc=$?
		fi
		;;
	eval)   $_SUDO eval "$_cmdl"; _rc=$?;;
	bash)   $_SUDO bash -c "$_cmdl"; _rc=$?;;
	tmux)   $_SUDO tmux new -s $_tmuxSession -d "$_cmdl" \; pipe-pane "cat >$_tmuxlogf"; _rc=$?;;
	esac

	return $_rc
}

at_exit() {
	#echo -e "\n\n{VM:debug} Removing tmpdir: $RuntimeTmp"
	/sbin/sysctl -w net.ipv6.conf.all.disable_ipv6=$orig_disable_ipv6 &>/dev/null
	rm -rf $RuntimeTmp
}
kill_installer_tmux_session() {
	local _vmn=$1
	[[ -z "$_vmn" ]] && return
	while read session _ ; do
		[[ "$session" = *_${_vmn}: ]] && tmux kill-session -t ${session%:}
	done < <(tmux ls 2>/dev/null)
}
cleanup() {
	if [[ -n "$VMpath" ]]; then
		echo -e "\n{VM:clean} Removing VM dir: $VMpath"
		rm -rfv "$VMpath"
		rmdir -v "${VMpath%/*}" 2>/dev/null

		echo -e "{VM:clean} kill installer assistant tmux session"
		kill_installer_tmux_session ${VMpath##*/}
	fi
	exit
}
trap cleanup SIGINT SIGQUIT SIGTERM
trap at_exit EXIT
#-------------------------------------------------------------------------------

vcpuN() {
	local _vcpus=$1
	local _vcpun= _sockets=1 _cores=4 _threads=1
	for _item in ${_vcpus//,/ }; do
		case $_item in
		[0-9]*) _vcpun=$_item;;
		sockets=*) _sockets=${_item#*=};;
		cores=*) _cores=${_item#*=};;
		threads=*) _threads=${_item#*=};;
		esac
	done

	if [[ -z "$_vcpun" ]]; then
		_vcpun=$((_sockets * _cores * _threads))
	fi

	echo -n $_vcpun
}

vmname_gen() {
	local distro=$1
	local cname=$2
	local name=${Distro//./}
	local archsuffix=
	name=${name,,}

	if [[ -n "$cname" ]]; then
		name=${cname}
	else
		[[ -n "$GuestARCH" ]] && archsuffix=_$GuestARCH
		name=${VMUSER}-${name}$archsuffix
	fi
	echo -n $name
}

vmname_extract() {
	local allopt=
	[[ "$1" = -all || "$1" = --all ]] && { shift; allopt=--all; }

	local i=0
	for vm; do
		let i=0
		for _vm in $(virsh list --name ${allopt}); do
			[[ "$_vm" = $vm ]] && { echo $_vm; let i++; }
		done
		[[ $i -eq 0 ]] && echo "$vm"
	done
}

_vmblklist() {
	local _vmname=$(vmname_extract -all "$1")
	local _pat=${2:-.}
	[[ -z "$_vmname" ]] && {
		echo "Usage: vmblklist <vmname> [pattern]"
		return 1
	}

	local blklist=$(virsh domblklist "$_vmname" --details | awk 'NR>2{print}' | sed -r '/^$/d')
	if [[ -z "$(grep -v cdrom <<<"$blklist")" ]]; then
		blklist+=$'\n'$(virsh dumpxml "$_vmname" |
			sed -rn '/qemu:commandline/,/\/qemu:commandline/{/.*file=([^,]+),.*/{s//_ _ _ \1/;p}}')
	fi
	echo "$blklist" | egrep "/$_vmname/"     | egrep "$_pat"
	echo "$blklist" | egrep -v "/$_vmname/"  | egrep "$_pat"
}

vmrootdir() {
	pushd $VMSHOME >/dev/null
	pwd
	ls -l
	popd >/dev/null
}

vmhomedir() {
	local _vmname=$(vmname_extract -all "$1")
	local _vmdir= _image=

	read _type _dev _target _image < <(_vmblklist $_vmname '\.(qcow2|qcow|raw)')
	if test -n "$_image"; then
		_vmdir=$(dirname $_image)
	elif test -d $VMSHOME/PXE/$_vmname; then
		_vmdir=$VMSHOME/PXE/$_vmname
	else
		echo "{VM:WARN} VM dir is empty, something is wrong!" >&2
		return 1
	fi

	if pushd $_vmdir &>/dev/null; then
		pwd
		ls -lahZ
		popd >/dev/null
		test -f $_vmdir/.kiss-vm ||
			echo "{VM:NOTE} seems this VM is not created by kiss-vm($(command -v vm))" >&2
	else
		echo "$_vmdir"
		ls -lahZ "$_vmdir" ||
			echo "{VM:WARN} current user($(whoami)) can not access the ^^ VM homedir ^^" >&2
	fi
}

_vmdelete() {
	local _vmname=$1
	[[ -z "$_vmname" ]] && {
		return 1
	}

	egrep -q "^$_vmname$" <(virsh list --name --all) || {
		echo -e "{VM:WARN} VM '$_vmname' does not exist"
		return 1
	}

	local userhome=$(getent passwd "$VMUSER" | cut -d: -f6)
	blk=$(_vmblklist "$_vmname")
	if test -n "$blk"; then
		! grep -q "$userhome/VM[sS]/" <<<"$blk" && {
			echo -e "{VM:DEBUG} blklist in '$_vmname':\n$blk"
			echo -e "{VM:WARN} VM '$_vmname' was not created by current user($VMUSER); try:"
			cat <<-EOF
			  virsh destroy $_vmname
			  virsh undefine $_vmname #--remove-all-storage --nvram
			EOF
			return 1
		}
	#pxe vms
	elif [[ ! -d $userhome/VMs/PXE/$_vmname ]]; then
		echo -e "{VM:WARN} VM '$_vmname' was not created by current user($VMUSER); try:"
		cat <<-EOF
		  virsh destroy $_vmname
		  virsh undefine $_vmname #--remove-all-storage --nvram
		EOF
		return 1
	fi

	local _vmdir= _image=
	read _type _dev _target _image < <(_vmblklist $_vmname '\.(qcow2|qcow|raw)')
	if test -n "$_image"; then
		_vmdir=$(dirname $_image)
	elif test -d $VMSHOME/PXE/$_vmname; then
		_vmdir=$VMSHOME/PXE/$_vmname
	else
		echo "{VM:WARN} VM dir is empty, something is wrong!" >&2
	fi

	echo -e "\n{VM:INFO} => dist removing VM $_vmname .."
	{ virsh destroy $_vmname 2>/dev/null; sleep 0.5
	  virsh undefine $_vmname 2>/dev/null || virsh undefine $_vmname --nvram; } | sed '/^$/d'

	if [[ "$_vmdir" = $VMSHOME/?*/$_vmname ]]; then
		echo -e "{VM:INFO} kill tmux session ..."
		kill_installer_tmux_session ${_vmname}

		echo -e "{VM:INFO} removing VM folder $_vmdir ..."
		rm -f $_vmdir/{url,nohup.log,ext4.qcow2,xfs.qcow2,vm.xml,qemu.argv,.kiss-vm}
		rm -f $_vmdir/*.cfg $_vmdir/*.ks
		rm -f $_vmdir/*.qcow2.xz $_vmdir/*.img $_vmdir/*.image
		rm -f $_vmdir/nvdimm-*.dev
		rm -f $_vmdir/*
		rmdir $_vmdir 2>/dev/null
		rmdir ${_vmdir%/*} 2>/dev/null
	fi
	return 0
}

vmdialogchecklist() {
	local cmdinfo=$1
	local resfile=$2
	local all=$3
	local vmlist=$(virsh list --name ${all:+--all})
	[[ -n "$VMUSER" ]] && vmlist=$(grep "^$VMUSER" <<<"$vmlist"; grep -v "^$VMUSER" <<<"$vmlist";)
	local vmList=$(echo "$vmlist" | sed -e /^$/d -e 's/.*/"&" "" 1/')
	[[ -z "${vmList}" ]] && {
		echo -e "{VM:WARN} there is not any VM in your host .." >&2
		return 1;
	}
	dialog --backtitle "$cmdinfo" --separate-output --checklist "${cmdinfo}: please select vms you want " 30 120 28 $vmList 2>$resfile; rc=$?
	tput cup $(tput lines) 0
	return $rc
}
vmdialogradiolist() {
	local cmdinfo=$1
	local resfile=$2
	local all=$3
	local vmlist=$(virsh list --name ${all:+--all})
	[[ -n "$VMUSER" ]] && vmlist=$(grep "^$VMUSER" <<<"$vmlist"; grep -v "^$VMUSER" <<<"$vmlist";)
	local vmList=$(echo "$vmlist" | sed -e /^$/d -e 's/.*/"&" "" 1/')
	[[ -z "${vmList}" ]] && {
		echo -e "{VM:WARN} there is not any VM in your host .." >&2
		return 1;
	}
	dialog --backtitle "$cmdinfo" --radiolist "${cmdinfo}: please select vm you want " 30 60 28 $vmList 2>$resfile; rc=$?
	tput cup $(tput lines) 0
	return $rc
}

vmdelete() {
	[[ $# = 0 ]] && {
		resf=$RuntimeTmp/vmlist
		vmdialogchecklist vm-delete $resf all && rmList=$(< $resf)
		[[ -z "$rmList" ]] && { return; }
		eval set $rmList
	}
	set -- $(vmname_extract -all "$@")
	for vm; do _vmdelete $vm; done
}

vmifaddr() {
	local GETENT=
	local VERBOSEIF=
	while :; do
		case "$1" in
		/x) GETENT=yes; shift;;
		/v) VERBOSEIF=yes; shift;;
		*)  break;;
		esac
	done

	local _vmname=$(vmname_extract -all "$1")
	VERBOSEIF=${2:+yes}
	[[ -z "$_vmname" ]] && {
		resf=$RuntimeTmp/vmlist
		vmdialogradiolist vm-ifaddr $resf && _vmname=$(sed 's/"//g' $resf)
		[[ -z "$_vmname" ]] && { return; }
	}

	local addrs=
	if [[ "$GETENT" = yes ]]; then
		addrs=$(getent hosts "$_vmname"|awk '{print $1}'|tac)
	else
		addrs=$(virsh --quiet domifaddr "$_vmname" | awk '{print $4}')
		if [[ -z "$VERBOSEIF" ]]; then
			addrs=$(echo "$addrs" | awk -F/ '{print $1}')
		fi
	fi
	[[ -n "$addrs" ]] && echo "$addrs"
}

vmviewer() {
	echo "{VM:INFO} redirect to: virt-viewer -s ..."
	local logf=$RuntimeTmp/vmviewer-$$.log
	local waitopt=
	[[ "$WAIT" = yes ]] && waitopt=-w

	set -- $(vmname_extract "$@")
	run -debug -nohup=$logf virt-viewer -s -v $waitopt "$@"
	sleep 1; cat $logf 2>/dev/null
}

vncgetsc() {
	local vncport=$1
	local _vmname=$(vmname_extract -all "$2")

	! command -v vncdo >/dev/null && {
		echo "{VM:WARN} command vncdo is needed by 'vncgetsc/vncgetscreen' function!" >&2
		return 1
	}
	local fname=$_vmname-screen-$(date +%F_%T_%N).png
	vncdo -s $vncport capture $RuntimeTmp/_screen.png
	mv $RuntimeTmp/_screen.png ./$fname
	ls -lh $fname
}

image_binarize() {
	local srcf=${1}
	local dstf=${2:-new-${srcf}}

	GMFirst=${GMFirst:-no}
	if [[ "$GMFirst" != yes ]] && command -v anytopnm >/dev/null; then
		anytopnm $srcf | ppmtopgm | pgmtopbm -threshold | pnmtopng > $dstf
	else
		local ConvertCmd="gm convert"
		! command -v gm >/dev/null && {
			if ! command -v convert >/dev/null; then
				echo "{VM:WARN} command gm or convert are needed by 'vncget' function!" >&2
				return 1
			else
				ConvertCmd=convert
			fi
		}
		$ConvertCmd $srcf -threshold 30% $dstf
	fi

	return 0
}

vncget() {
	local vncport=$1

	! command -v vncdo >/dev/null && {
		echo "{VM:WARN} command vncdo is needed by 'vncget' function!" >&2
		return 1
	}
	! command -v gocr >/dev/null && {
		echo "{VM:WARN} command gocr is needed by 'vncget' function!" >&2
		return 1
	}
	vncdo -s $vncport capture $RuntimeTmp/_screen.png
	[[ ! -s $RuntimeTmp/_screen.png ]] && {
		echo "{VM:WARN} vncdo capture fail, it might because that conflict with unshared 'virt-viewer'" >&2
	}
	image_binarize $RuntimeTmp/_screen.png $RuntimeTmp/_screen2.png
	gocr -i $RuntimeTmp/_screen2.png 2>/dev/null | GREP_COLORS='ms=30;47' grep --color .
}

vncput() {
	local vncport=$1
	shift

	command -v vncdo >/dev/null || {
		echo "{VM:WARN} vncdo is needed by 'vncput' function!" >&2
		return 1
	}

	local msgArray=()
	for msg; do
		[[ -z "$msg" ]] && { msgArray+=(); continue; }
		case "$msg" in
		key:*|keyup:*|keydown:*)
			msgArray+=("$msg")
			;;
		*)
			regex='[~@#$%^&*()_+|}{":?><!]'
			_msg="${msg#type:}"
			if [[ "$_msg" =~ $regex ]]; then
				while IFS= read -r line; do
					if [[ "$line" = key:shift-? ]]; then
						: #line=key:shift-$(tr ')~!@#$%^&*(+}{|:><?"'   '0`123456789=][\\;.,/'"'" <<<"${line: -1}")
					else
						line="type:$line"
					fi
					msgArray+=("$line")
				done < <(sed -r -e 's;[~!@#$%^&*()_+|}{":?><]+;&\n;g' -e 's;[~!@#$%^&*()_+|}{":?><];\nkey:shift-&;g' <<<"$_msg")
			else
				msgArray+=("$msg")
			fi
			;;
		esac
		msgArray+=("")
	done
	for msg in "${msgArray[@]}"; do
		[[ -z "$msg" ]] && { sleep 0.5; continue; }
		case "$msg" in
		key:*)     vncdo --force-caps -s $vncport key "${msg#key:}";;
		keyup:*)   vncdo --force-caps -s $vncport keyup "${msg#keyup:}";;
		keydown:*) vncdo --force-caps -s $vncport keydown "${msg#keydown:}";;
		*)         vncdo --force-caps -s $vncport type "${msg#type:}";;
		esac
	done
}

_vmvncport() {
	local _vmn=$1;
	virsh dumpxml "$_vmn" | sed -rn "/.* type=.vnc. port=.([0-9]+).*/{s//\1/;p}";
}
vmvncproc() {
	local _vmname=$(vmname_extract -all "$1")
	[[ -z "$_vmname" ]] && {
		resf=$RuntimeTmp/vmlist
		vmdialogradiolist vm-vncproc $resf all && _vmname=$(sed 's/"//g' $resf)
		[[ -z "$_vmname" ]] && { return; }
	}

	local port=$(_vmvncport $_vmname)
	if [[ -n "${port}" ]]; then
		if [[ -z "${VNCPUTS}" && -z "${VNCGET}" && -z "${VNCGETSC}" ]]; then
			for _host in $(hostname -A|xargs -n 1|sort -u); do
				ping -c 2 $_host &>/dev/null || continue
				echo $_host:$port
			done
			return
		fi

		if [[ -n "${VNCPUTS}" ]]; then
			vncput localhost::$port "${VNCPUTS[@]}"
			echo "[vncput@$_vmname]> ${VNCPUTS[*]}"
		fi
		if [[ -n "${VNCGETSC}" ]]; then
			[[ -t 1 || ! -p /dev/stdout ]] && echo "[vncgetsc@$_vmname]:" >&2
			vncgetsc localhost::$port $_vmname
		fi
		if [[ -n "${VNCGET}" ]]; then
			[[ -t 1 || ! -p /dev/stdout ]] && echo "[vncget@$_vmname]:" >&2
			vncget localhost::$port $_vmname
		fi
	fi
}

vmxml() {
	local _vmname=$(vmname_extract -all "$1")
	[[ -z "$_vmname" ]] && {
		resf=$RuntimeTmp/vmlist
		vmdialogradiolist vm-dumpxml $resf all && _vmname=$(sed 's/"//g' $resf)
		[[ -z "$_vmname" ]] && { return; }
	}

	virsh dumpxml "$_vmname"
}

vmedit() {
	local _vmname=$(vmname_extract -all "$1")
	[[ -z "$_vmname" ]] && {
		resf=$RuntimeTmp/vmlist
		vmdialogradiolist vm-edit $resf all && _vmname=$(sed 's/"//g' $resf)
		[[ -z "$_vmname" ]] && { return; }
	}

	virsh edit "$_vmname"
}

port_available() {
	nc $(grep -q -- '-z\>' < <(nc -h 2>&1) && echo -z) $1 $2 </dev/null &>/dev/null
}

vmreboot() {
	local _vmname=$(vmname_extract -all "$1")
	[[ -z "$_vmname" ]] && {
		resf=$RuntimeTmp/vmlist
		vmdialogradiolist vm-reboot $resf all && _vmname=$(sed 's/"//g' $resf)
		[[ -z "$_vmname" ]] && { return; }
	}

	virsh destroy "$_vmname" 2>/dev/null
	virsh start "$_vmname"
	[[ "$WAIT" = yes ]] && {
		echo -e "{VM:INFO} waiting restart finish ..."
		read _addr < <(vmifaddr "$_vmname")
		until port_available ${_addr} 22; do sleep 1; done
	}
}

vmstop() {
	local _vmname=$(vmname_extract "$1")
	[[ -z "$_vmname" ]] && {
		resf=$RuntimeTmp/vmlist
		vmdialogchecklist vm-shutdown $resf all && vmList=$(< $resf)
		[[ -z "$vmList" ]] && { return; }
		eval set $vmList
	}

	set -- $(vmname_extract "$@")
	for vm; do virsh destroy "$vm"; done
}

vmstart() {
	local _vmname=$(vmname_extract -all "$1")
	[[ -z "$_vmname" ]] && {
		resf=$RuntimeTmp/vmlist
		vmdialogchecklist vm-start $resf all && vmList=$(< $resf)
		[[ -z "$vmList" ]] && { return; }
		eval set $vmList
	}
 
	set -- $(vmname_extract -all "$@")
	for vm; do virsh start "$vm"; done
}

vmstat() {
	local _vmname=$(vmname_extract -all "$1")
	[[ -z "$_vmname" ]] && {
		resf=$RuntimeTmp/vmlist
		vmdialogchecklist vm-stat $resf all && vmList=$(< $resf)
		[[ -z "$vmList" ]] && { return; }
		eval set $vmList
	}

	set -- $(vmname_extract -all "$@")
	for vm; do
		virsh domstate "$vm"
	done
}

vmclone() {
	[[ "$1" = /a ]] && {
		shift
		local APPEND=yes
	}

	is_invalid_vmname() {
		local nvmname=$1
		egrep --color=always "[][~\!@#$^&()=,\":;{}|<>'\` ]" <<<"$nvmname"
	}

	local srcname=$(vmname_extract -all "$1"|head -1)
	local dstname=$2
	[[ -z "$srcname" ]] && {
		resf=$RuntimeTmp/vmlist
		vmdialogradiolist vm-clone $resf all && srcname=$(sed 's/"//g' $resf)
		[[ -z "$srcname" ]] && {
			return;
		}
	}
	if [[ -z "$dstname" ]]; then
		dstname=${srcname}-clone-$$
	else
		#verify invalid charactors
		[[ "$APPEND" = yes ]] && dstname=${srcname}-${dstname}
	fi
	is_invalid_vmname "$dstname" && return 1

	#get src vm path
	srcpath=$(vmhomedir $srcname 2>/dev/null|head -n1)
	[[ ! -r "${srcpath}" ]] && {
		echo "homedir($srcname): $srcpath"
		echo -e "{VM:WARN} Guest homedir is not readable for current user($(whoami)) ..."
		return 1
	}
	[[ ! -f ${srcpath}/.kiss-vm || ${srcpath##*/} != ${srcname} ]] && {
		echo -e "{VM:WARN} seems $srcname was not created by kiss-vm, can not use vm-clone; please use virt-clone instead ..."
		return 1
	}
	[[ ! -r ${srcpath}/.kiss-vm ]] && {
		vmhomedir $srcname
		echo -e "{VM:WARN} Guest $srcname is not readable for current user($(whoami)) ..."
		return 1
	}

	#virsh suspend "$srcname"
	virsh destroy "$srcname" 2>/dev/null
	[[ "$(vmstat $srcname)" = running* ]] && {
		echo -e "{VM:WARN} Guest $srcname is still running, please stop it before clone ..."
		return 1
	}

	# do clone
	local distron=$(awk -F/ '{print $(NF-1)}' <<<"${srcpath}")
	local dstpath=$VMSHOME/$distron/$dstname
	run -as=$VMUSER mkdir -p $dstpath
	if [[ "$VMSHARE" != yes ]]; then
		setfacl -d -mg::--- -mo::--- $dstpath
	fi
	run -as=$VMUSER touch $dstpath/.kiss-vm
	rm -f $dstpath/${dstname}.qcow2
	run -as=$VMUSER bash -c "virt-clone -o ${srcname} --name ${dstname} --file $dstpath/${dstname}.qcow2 \
		--check path_exists=off \
		--print-xml >$dstpath/${dstname}.xml"
	[[ -s $dstpath/${dstname}.xml ]] || return 1
	#Note: https://www.reddit.com/r/archlinux/comments/obn999/ownership_of_qcow2_images_created_by_virtmanager/
	#^^^^ why don't use virt-clone directly

	read _type _dev _target srcimage < <(_vmblklist "$srcname")
	cp -v --sparse=always $srcimage $dstpath/${dstname}.qcow2
	if [[ $(id -u) = 0 ]]; then
		chown $VMUSER:$(id -g -u $VMUSER) -R $dstpath
	fi
	chcon --reference=${srcpath%/*} -R $dstpath
	run -as=$VMUSER virsh define $dstpath/${dstname}.xml
	vmhomedir ${dstname}

		#--enable customize,user-account,ssh-hostkeys,net-hostname,net-hwaddr,machine-id \
	LIBGUESTFS_BACKEND=direct virt-sysprep -d ${dstname} \
		--enable customize,user-account,net-hostname,net-hwaddr,machine-id \
		--hostname $dstname \
		--remove-user-accounts bar \
		--run-command "ls -l"
	virsh start $dstname

	#virsh resume "$srcname"
	#virsh start "$srcname"
}

sshtest() {
	local target=$1
	local sshOpts=${2:--o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no -o GSSAPIAuthentication=no}
	local result=255
	local tmpf=${RuntimeTmp}/_sshtest
	local KexAlgorithmsOpt=
	[[ -z "${RuntimeTmp}" ]] && tmpf=$(mktemp)
	local _cmd=  #work-around for avoiding hang while test against windows openssh-server
	[[ "${target,,}" = administrator@* ]] && _cmd=exit
	ssh -v -n -o Batchmode=yes $sshOpts $target $_cmd &>$tmpf; sshrc=$?
	[[ "$DEBUG" = yes ]] && {
		echo "[sshtest:debug] sshrc=$sshrc" >&2
		echo -e "\033[32m$(tail -n 20 $tmpf)\033[0m" >&2
	}
	if [[ $sshrc = 0 ]]; then
		result=0  #can login or run command without password
	elif grep -iq '^Bytes per second:' $tmpf; then
		result=0  #freebsd "publickey" login
	elif grep -v ^debug1: $tmpf|grep -iq "Permission denied (.*password.*)"; then
		result=1  #can login or run command with password
	elif grep -iq "no matching key exchange method found. Their offer:" $tmpf; then
		local KexAlgorithmsOpt=-oKexAlgorithms=+$(sed -n '/^.*Their offer: /{s///;s/\r//;p}' $tmpf)
		if [[ "$sshOpts" != *$KexAlgorithmsOpt ]]; then
			sshOpts+=" $KexAlgorithmsOpt"
			sshtest $target "$sshOpts"
			result=$?
		else
			result=2  #can not connect to ssh
		fi
	fi
	[[ -z "${RuntimeTmp}" ]] && rm -f $tmpf

	[[ -z "$KexAlgorithmsOpt" ]] && echo "$sshOpts"
	return $result
}

vmcopyto() {
	[[ "$#" -lt 3 ]] && {
		echo "Usage: vm cpto vmname <src files/dirs ...> <dst dir in vm>"
		return 1
	}
	local _vmname=$(vmname_extract "$1"|head -1)
	shift 1
	local _addr=
	local dstdir=${@: -1}
	local srcarray=("${@:1: $#-1}")

	read _addr < <(vmifaddr "$_vmname")
	port_available $_addr 22 || {
		echo -e "{VM:ERR} port $_vmname:22 is not available"
		return 1
	}

	local sshstat=unavailable
	local sshOpts="-o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no -o GSSAPIAuthentication=no -o LogLevel=ERROR"
	local U=root
	vmhomedir $_vmname | grep -q -i windows && {
		U=Administrator; defaultPasswd=$defaultWindowsPasswd;
	}
	sshOpts=$(sshtest $U@$_addr "$sshOpts")
	case $? in 0) sshstat=yes;; 1) sshstat=passwd;; esac
	if [[ $sshstat = yes ]]; then
		scp $sshOpts -r "${srcarray[@]}" $U@${_addr}:$dstdir/.
		rc=$?
		[[ $rc = 0 ]] && {
			ssh $sshOpts $U@${_addr} ls -l $dstdir
		}
	elif [[ $sshstat = passwd ]]; then
		expect <(cat <<-EOF
		set timeout 120
		spawn scp $sshOpts -r "${srcarray[@]}" $U@${_addr}:$dstdir/.
		expect {
			"password:" { send "$defaultPasswd\r"; exp_continue }
			"Password for" { send "$defaultPasswd\r"; exp_continue }
			eof
		}
		foreach {pid spawnid os_error_flag value} [wait] break
		exit \$value
		EOF
		)
		rc=$?
	else
		echo -e "{VM:WARN} ssh $_vmname is not available ..."
		rc=1
	fi
	return $rc
}

vmcopyfrom() {
	[[ "$#" -lt 3 ]] && {
		echo "Usage: vm cpfrom vmname <file/dir> <dst dir>"
		return 1
	}
	local _vmname=$(vmname_extract "$1"|head -1)
	shift 1
	local src=${1%/}
	local dstf=${2}
	[[ -d "$dstf" ]] && dstf=$(readlink -f $dstf)/.

	read _addr < <(vmifaddr "$_vmname")
	port_available $_addr 22 || {
		echo -e "{VM:ERR} port $_vmname:22 is not available"
		return 1
	}

	local sshstat=unavailable
	local sshOpts="-o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no -o GSSAPIAuthentication=no -o LogLevel=ERROR"
	local U=root
	vmhomedir $_vmname | grep -q -i windows && {
		U=Administrator; defaultPasswd=$defaultWindowsPasswd;
	}
	sshOpts=$(sshtest $U@$_addr "$sshOpts")
	case $? in 0) sshstat=yes;; 1) sshstat=passwd;; esac
	if [[ $sshstat = yes ]]; then
		scp $sshOpts -r $U@${_addr}:$src $dstf
		rc=$?
	elif [[ $sshstat = passwd ]]; then
		expect <(cat <<-EOF
		set timeout 120
		spawn scp $sshOpts -r $U@${_addr}:$src $dstf
		expect {
			"password:" { send "$defaultPasswd\r"; exp_continue }
			"Password for" { send "$defaultPasswd\r"; exp_continue }
			eof
		}
		foreach {pid spawnid os_error_flag value} [wait] break
		exit \$value
		EOF
		)
		rc=$?
	else
		echo -e "{VM:WARN} ssh $_vmname is not available ..."
		rc=1
	fi

	[[ $rc = 0 ]] && {
		if [[ -f "$dstf" ]]; then
			ls -l $dstf
		else
			ls -l -d ${dstf}/${src##*/}
		fi
	}

	return $rc
}

vmport_available() {
	local _vmname=$(vmname_extract -all "$1")
	local _port=${2:-22}
	local wait_opt=
	[[ -z "$_vmname" ]] && {
		resf=$RuntimeTmp/vmlist
		vmdialogradiolist vm-console $resf && _vmname=$(sed 's/"//g' $resf)
		[[ -z "$_vmname" ]] && { return; }
	}
	local _addr=$(vm ifaddr "$_vmname"|head -1)
	if [[ "$WAIT" = yes ]]; then
		while [[ -z "$_addr" ]]; do
			sleep 8
			_addr=$(vm ifaddr "$_vmname"|head -1)
		done
		port-available.sh "$_addr" $_port -w
	else
		port-available.sh "$_addr" $_port
	fi
	return $?
}

vmconsole() {
	local _vmname=$(vmname_extract -all "$1")
	shift
	[[ -z "$_vmname" ]] && {
		resf=$RuntimeTmp/vmlist
		vmdialogradiolist vm-console $resf && _vmname=$(sed 's/"//g' $resf)
		[[ -z "$_vmname" ]] && { return; }
	}
	virsh console "$_vmname"
	return $?
}

vmlogin() {
	local _vmname=$(vmname_extract -all "$1")
	shift
	[[ -z "$_vmname" ]] && {
		resf=$RuntimeTmp/vmlist
		vmdialogradiolist vm-login $resf && _vmname=$(sed 's/"//g' $resf)
		[[ -z "$_vmname" ]] && { return; }
	}
	[[ "$(vmstat $_vmname)" = running* ]] || {
		echo -e "{VM:WARN} $_vmname has not been running"
		return 1
	}

	local sshCommand=$(getReusableCommandLine "$@")
	local U=root
	vmhomedir $_vmname | grep -q -i windows && {
		U=Administrator; defaultPasswd=$defaultWindowsPasswd;
	}
	[[ "${EXEC}" = yes ]] && {
		[[ $# = 0 ]] && set "exit 0";
		[[ "$VERBOSE" = yes ]] &&
			echo -e "\E[01;36m[$U@$_vmname]> $sshCommand\E[0m" >&2
	}

	#sometimes there's bug in libnss. get more than one addr but some one
	#of them does not exist. detect and ignore it/them
	addrs=$(vmifaddr "$_vmname")
	[[ -z "$addrs" ]] && {
		echo -e "{VM:WARN} can not get ip info of $_vmname, try login with console ..."
		virsh console "$_vmname"
		return $?
	}

	local sshOpts="-o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no -o GSSAPIAuthentication=no"
	echo "$sshCommand" >$RuntimeTmp/sshcmd
	for addr in $addrs; do
		[[ "$DEBUG" = yes ]] &&
			echo -e "\E[01;36m[vmlogin:debug] detect port ${addr}:22 ...\E[0m" >&2

		port_available $addr 22 || {
			echo -e "{VM:WARN} port $addr:22 is not available"
			continue
		}

		[[ "$DEBUG" = yes ]] &&
			echo -e "\E[01;36m[vmlogin:debug] port ${addr}:22 available ...\E[0m" >&2

		sshstat=unavailable
		sshOpts=$(sshtest $U@$addr "$sshOpts")
		case $? in 0) sshstat=yes;; 1) sshstat=passwd;; esac
		if [[ $sshstat = yes ]]; then
			ssh $sshOpts $U@$addr "$sshCommand"
			rc=$?
		elif [[ $sshstat = passwd ]]; then
			expect <(cat <<-EOF
			set timeout 120
			set sshcmd [exec cat $RuntimeTmp/sshcmd]
			log_user 0
			spawn ssh $sshOpts $U@$addr \$sshcmd
			log_user 1
			if {\$argc == 0} {
				expect {
				"\[Pp]assword:" { send "$defaultPasswd\r"; exp_continue }
				"Password for" { send "$defaultPasswd\r"; exp_continue }
				"*# " { send "\r"; interact }
				}
			} else {
				expect {
				"\[Pp]assword:" { send "$defaultPasswd\r"; exp_continue }
				"Password for" { send "$defaultPasswd\r"; exp_continue }
				eof
				}
			}
			foreach {pid spawnid os_error_flag value} [wait] break
			exit \$value
			EOF
			) "$@"
			rc=$?
		else
			if [[ "${EXEC}" = yes ]]; then
				echo -e "{VM:ERR} ssh $U@$addr is not available, exit."
				return 1
			else
				echo -e "{VM:WARN} ssh $U@$addr is not available, try login with console ..."
				virsh console "$_vmname"
				rc=$?
			fi
		fi

		faillog() { echo -e "\033[41m{TEST:FAIL} $*\033[0m"; }
		[[ -n "$expectedrc" ]] && {
			[[ " ${expectedrc[@]} " != *" $rc "* ]] && {
				faillog "return code: expect $expectedRC, but got $rc"
			}
		}

		return $rc
	done
}

vmadd_iso() {
	local vmname=$(vmname_extract -all "$1")
	local isof=$2
	local homedir=$(vm homedir $vmname |& head -1)
	if [[ ! -d "$homedir" ]]; then
		echo -e "{VM:ERROR} empty or invalide vm-homedir($homedir)"
		return
	fi
	if [[ -f "$isof" ]]; then
		cp "$isof" $homedir/.
		isof=$homedir/${isof##*/}
	else
		echo -e "{VM:WARN} iso file '$isof' not exist ..."
		return
	fi

	local xmls=$(virsh dumpxml $vmname; virsh dumpxml --inactive $vmname)
	for _target in sd{c..z}; do echo "$xmls"|grep -q -w $_target || break; done
	run -debug virsh attach-disk $vmname "$isof" $_target --targetbus=sata --type cdrom --mode readonly
	if [[ $? != 0 ]]; then
		local _type= _dev= target= _image=
		read _type _dev target _image < <(_vmblklist $vmname | awk '$2=="cdrom"')
		echo -e "{VM:INFO} retry->push iso into existed cdrom: $target"
		run -debug virsh attach-disk $vmname "$isof" $target --type cdrom --mode readonly
	fi
}

vmadd_disk() {
	local vmname=$(vmname_extract -all "$1")
	local diskf=$2
	local homedir=$(vm homedir $vmname |& head -1)
	if [[ ! -d "$homedir" ]]; then
		echo -e "{VM:ERROR} empty or invalide vm-homedir($homedir)"
		return 1
	fi
	local subdrv_opt=
	local tgtbus_opt=
	local diskprefix=sd

	read diskf _attrs <<< "${diskf//,/ }"
	eval "$_attrs"  #drv=qcow2,raw,... bus=virtio,scsi,sata,...
	[[ -n "$drv" ]] && subdrv_opt=--subdriver=$drv
	[[ -n "$bus" ]] && tgtbus_opt=--targetbus=$drv

	if [[ -f "$diskf" ]]; then
		cp "$diskf" $homedir/.
		diskf=$homedir/${diskf##*/}
		file "$diskf"|grep -iq "QEMU QCOW Image" && subdrv_opt=--subdriver=qcow2
	elif [[ -b "$diskf" ]]; then
		:
	elif [[ ! -e "$diskf" && "$diskf" != */* ]]; then
		diskf="$homedir/$diskf"
		[[ -f "$diskf" ]] && { echo -e "{VM:WARN} '$diskf' already exist."; return; }
		qemu-img create -f qcow2 "${diskf}" ${size:-80}G
		subdrv_opt=${subdrv_opt:---subdriver=qcow2}
	fi

	if [[ ! -e "$diskf" ]]; then
		echo -e "{VM:ERROR} file '$diskf' not exist"
		return 2
	fi

	[[ "$tgtbus_opt" = *virtio* ]] && diskprefix=vd
	local xmls=$(virsh dumpxml $vmname; virsh dumpxml --inactive $vmname)
	for _target in $diskprefix{a..z}; do echo "$xmls"|grep -q -w $_target || break; done
	run -debug virsh attach-disk $vmname $subdrv_opt $tgtbus_opt "$diskf" $_target
}

vmadd_if() {
	local vmname=$(vmname_extract -all "$1")
	local network=$2

	run -debug virsh attach-interface --type network --domain $vmname --source $network \
		--model virtio --config --live
}

vmadd_if_bridge() {
	local vmname=$(vmname_extract -all "$1")
	local brg=$2

	run -debug virsh attach-interface --type bridge --domain $vmname --source $brg \
		--model virtio --config --live
}

vmadd_if_direct() {
	local vmname=$(vmname_extract -all "$1")
	local srcif=${srcif:-$(get_default_if)}

	run -debug virsh attach-interface --type direct --domain $vmname --source $srcif \
		--model virtio --config --live
}

nic2pcislot() {
	local nic=$1
	local eventf=/sys/class/net/$nic/device/uevent
	if [[ -e $eventf ]]; then
		awk -F= '/PCI_SLOT_NAME/{print "pci_" $2}' $eventf | sed 's/[:.]/_/g'
	fi
}

vmadd_if_passthr() {
	local vmname=$(vmname_extract -all "$1")
	local _hostif=$2
	local pci_addr=$2
	local eventf=/sys/class/net/$_hostif/device/uevent
	if [[ -e $eventf ]]; then
		pci_addr=$(nic2pcislot $_hostif)
	fi

	run -debug virsh attach-interface --type hostdev --domain $vmname --source $pci_addr \
		--config --live
}

vmpassthr() {
	:
}

vmexec() { EXEC=yes vmlogin "$@"; }
vmlist() { virsh list --all; }
netls() { virsh net-list; }
netcreate() {
	local netname=
	local brname=
	local subnet=
	local forward=nat

	[[ $# = 0 ]] && { virsh net-list; return; }
	Usage() {
		cat <<-U
		Example:
		  vm netcreat netname=net10 brname=virbr10 subnet=10  #means 192.168.10.0
		  vm netcreat netname=net10 brname=virbr10 subnet=172.25.252.0
		  vm netcreat netname=net10 brname=virbr10 subnet=172.25.252.0 forward=no
		  vm netcreat netname=net10 brname=virbr10 subnet=172.25.252.0 forward=nat [tftproot=/path] [bootpfile=]
		U
	}
	for opt; do [[ "$opt" =~ ^(netname|brname|subnet|forward|tftproot|bootpfile)=.* ]] || continue; eval "$opt"; done
	[[ -z "$netname" || -z "$brname" ]] && { Usage >&2; return 1; }

	#https://libvirt.org/formatnetwork.html
	[[ -n "$forward" && "$forward" != no ]] && {
		forwardNode="<forward mode=\"$forward\"/>"
		[[ "$forward" = nat ]] && forwardNode="<forward mode=\"$forward\" >
		    <nat>
		      <port start='1024' end='65535'/>
		    </nat>
		  </forward>"
	}
	[[ -n "$tftproot" ]] && tftpNode="<tftp root='$tftproot'/>"
	[[ -n "$bootpfile" ]] && bootpNode="<bootp file='$bootpfile'/>"
	if [[ -n "$subnet" ]]; then
		netmask=255.255.255.0
		rx='([1-9]?[0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])'
		if [[ "$subnet" =~ ^${rx}$ ]]; then
			subnet=192.168.${subnet}
		elif [[ "$subnet" =~ ^$rx\.$rx\.$rx$ ]]; then
			subnet=${subnet}
		elif [[ "$subnet" =~ ^$rx\.$rx\.$rx\.$rx$ ]]; then
			subnet=${subnet%.*}
		else
			echo "{VM:netcreate} invalid subnet addr: $subnet" >&2
			Usage >&2
			return 1
		fi

		gatewayaddr="${subnet}.1"
		range_start="${subnet}.128"
		range_end="${subnet}.254"

		ipNode="<ip address=\"${subnet}.1\" netmask=\"$netmask\" >
		    $tftpNode
		    <dhcp>
		      <range start=\"${range_start}\" end=\"${range_end}\"/>
		      $bootpNode
		    </dhcp>
		  </ip>"
	fi

	virsh net-info -- "$netname" &>/dev/null && {
		echo "{VM:WARN} Virt network $netname has been there."
		return
	}

	virsh net-define --file <(
		cat <<-NET
		<network>
		  <name>$netname</name>
		  <bridge name="$brname" />
		  $forwardNode
		  $ipNode
		</network>
		NET
	)
	virsh net-start $netname
	virsh net-autostart $netname
}
netinfo() {
	for net; do
		virsh net-info -- $net || continue
		virsh net-dumpxml -- $net
	done
}
netstart() {
	for net; do
		virsh net-start -- $net
	done
}
netdelete() {
	echo -e "\n{VM:INFO} => delete virtual net: $@ .."
	for net; do
		virsh net-destroy -- $net
		virsh net-undefine -- $net
	done
}

vercmp() {
	usage() {
		echo "usage: vercmp  <ver1> < =  | '>' | '<' | '>=' | '<=' >  <ver2>" >&2
		echo "       vercmp  <ver1> < eq | gt  | lt  |  ge  |  le  >  <ver2>" >&2
		echo "       vercmp  <ver1> < match >  <'pattern'>" >&2
	}

	[ $# != 3 ] && {
		usage
		return 1
	}
	vl=$1
	cmpType=$2
	vr=$3
	res=1

	[ "$vl" = "$vr" ] && eq=1
	vmax=$(echo -e "$vl\n$vr" | sort -V | tail -n 1)

	case "$cmpType" in
	=|eq) [ "$eq" = 1 ] && res=0;;
	\>|gt) [ "$eq" != 1 -a "$vl" = "$vmax" ] && res=0;;
	\<|lt) [ "$eq" != 1 -a "$vr" = "$vmax" ] && res=0;;
	\>=|ge) [ "$vl" = "$vmax" ] && res=0;;
	\<=|le) [ "$vr" = "$vmax" ] && res=0;;
	*) echo "$vl" | egrep -q "$vr"; res=$?;;
	esac

	return $res
}

curl_download() {
	local filename=$1
	local url=$2
	shift 2;

	local curlopts="-f -L -k"
	local header=
	local fsizer=1
	local fsizel=0
	local rc=

	[[ -z "$filename" || -z "$url" ]] && {
		echo "Usage: curl_download <filename> <url> [curl options]" >&2
		return 1
	}

	header=$(curl -L -I -s $url|sed 's/\r//')
	fsizer=$(echo "$header"|awk '/Content-Length:/ {print $2; exit}')
	if echo "$header"|grep -q 'Accept-Ranges: bytes'; then
		curlopts+=' --continue-at -'
	fi

	echo "{VM:INFO} run: curl -o $filename \$url $curlopts $curlOpt $@"
	run -as=$VMUSER curl -o $filename $url $curlopts $curlOpt "$@"
	rc=$?
	if [[ $rc != 0 && -s $filename ]]; then
		fsizel=$(stat --printf %s $filename)
		if [[ $fsizer -le $fsizel ]]; then
			echo "{VM:INFO} *** '$filename' already exist $fsizel/$fsizer"
			rc=0
		fi
	fi

	return $rc
}
curl_download_x() { until curl_download "$@"; do sleep 1; done; }

#-------------------------------------------------------------------------------

is_slackware() { grep -iq slackware /etc/os-release; }
sbopkg_install() {
	local pkg=$1
	sudo /usr/sbin/sqg -p $pkg
	yes $'Q\nY\nP\nC' | sudo /usr/sbin/sbopkg -B -i $pkg
}
install_requires() {
	. /etc/os-release
	OS=$NAME

	local pkglist=
	local recommend_pkglist=

	echo -e "{VM:INFO} checking libvirtd service and related packages ..."
	case ${OS,,} in
	slackware*)
		pkglist="python3 udisks2"
		for pkg in $pkglist; do
			sudo /usr/sbin/slackpkg -batch=on -default_answer=y -orig_backups=off install $pkg
		done

		echo -e "{VM:INFO} install sbopkg ..."
		install-sbopkg.sh

		sbopkglist="qemu libvirt virt-manager virt-viewer ovmf"
		for pkg in $sbopkglist; do
			if ! ls /var/log/packages/${pkg}-[0-9]* 2>/dev/null; then
				sbopkg_install $pkg
			fi
		done
		;;
	fedora*|red?hat*|centos*|rocky*)
		pkglist="bash-completion libvirt libvirt-client virt-install virt-viewer qemu-kvm expect nmap-ncat tmux libguestfs-tools-c libvirt-nss dialog qemu-img udisks2 genisoimage iptables-nft"
		recommend_pkglist="swtpm-tools edk2-ovmf virtio-win"

		OSV=$(rpm -E %rhel)
		if ! egrep -q '^!?epel' < <(yum repolist 2>/dev/null); then
			[[ "$OSV" != "%rhel" ]] && yum $yumOpt install -y https://dl.fedoraproject.org/pub/epel/epel-release-latest-${OSV}.noarch.rpm 2>/dev/null
		fi
		rpm -q $pkglist || {
			sudo yum $yumOpt --setopt=strict=0 install -y $pkglist
		}
		rpm -q $recommend_pkglist || {
			sudo yum $yumOpt --setopt=strict=0 install -y $recommend_pkglist
		}

		#install virtio driver for Windows Guest
		#see: https://github.com/virtio-win/virtio-win-pkg-scripts/blob/master/README.md
		rpm -q virtio-win &>/dev/null || {
			sudo wget https://fedorapeople.org/groups/virt/virtio-win/virtio-win.repo   -O /etc/yum.repos.d/virtio-win.repo
			sudo yum install -y virtio-win
		}
		[[ "$OSV" = 7 && $HostARCH = x86_64 ]] && { yum remove -y tmux && yum install -y ftp://ftp.pbone.net/mirror/ftp5.gwdg.de/pub/opensuse/repositories/home:/assmannst/CentOS_7/x86_64/tmux-2.6-3.1.x86_64.rpm; }
		;;
	debian*|ubuntu*)
		pkglist="bash-completion libnss-libvirt libvirt-clients libvirt-daemon libvirt-daemon-system dnsmasq qemu-kvm virtinst expect netcat tmux libguestfs-tools dialog qemu-utils udisks2 genisoimage nftables acl"
		recommend_pkglist="swtpm-tools edk2-ovmf virtio-win"

		read -d . verx 2>/dev/null </etc/debian_version
		[[ "$verx" = 9 ]] && {
			sudo apt -y update; sudo apt -y upgrade
			sudo apt install -o APT::Install-Suggests=0 -o APT::Install-Recommends=0 -y busybox-static iptables ebtables
		}
		sudo apt install -o APT::Install-Suggests=0 -o APT::Install-Recommends=0 --ignore-missing -y $pkglist
		sudo apt install -o APT::Install-Suggests=0 -o APT::Install-Recommends=0 --ignore-missing -y $recommend_pkglist
		;;
	opensuse*|sles*)
		pkglist="bash-completion libvirt libvirt-client virt-install virt-viewer qemu-kvm expect netcat tmux libguestfs libvirt-nss dialog qemu-tools udisks2 mkisofs iptables-nft"
		recommend_pkglist="swtpm-tools edk2-ovmf virtio-win"

		sudo zypper in --no-recommends -y $pkglist
		sudo zypper in --no-recommends -y $recommend_pkglist
		;;
	*)
		: #fixme add more platform
		echo -e "{VM:WARN} kiss-vm doesn't supported this platform($OS)"
		return 2
		;;
	esac
}

prepare_kiss_vm() {
	local force=$1
	local vmuser=${VMUSER}
	eval vmuserhome=~$vmuser
	if [[ -n "$force" ]]; then
		echo -e "{VM:INFO} force re-prepare kiss-vm env"
	else
		[[ -d $oldperConfDir ]] && { mv $oldperConfDir $perConfDir; run -as=$vmuser touch $perConfDir/kiss-vm; }
		if [[ -f $perConfDir/kiss-vm ]]; then
			[[ "$ONLY_PREPARE" = yes ]] && echo -e "{VM:INFO} kiss-vm has been initialized."
			return 0
		fi
	fi

	echo -e "~~~~~~~~~~~~~~~~~~~~~~~~~~~~ prepare libvirt start ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
	test $(id -u) = 0 || { echo "{VM:Error} vm prepare need root permission, try: sudo $P prepare" >&2; exit 1; }

	#disable ipv6
	/sbin/sysctl -w net.ipv6.conf.all.disable_ipv6=1

	#install packages required by kiss-vm
	install_requires; [[ $? = 2 ]] && return 1
	{ QEMU_USER=qemu; id ${QEMU_USER} &>/dev/null || QEMU_USER=libvirt-qemu; }

	#install packages(gm,gocr,vncdo) required by vnc -get -put --putln options
	echo -e "{VM:INFO} install gm gocr and vncdo ..."
	ggv-install.sh

	#install packages qemu-system-*
	qemu-system-archs-install.sh aarch64 s390x ppc riscv

	echo -e "{VM:INFO} configure libvirt-nss ..."
	grep -q '^hosts:.*libvirt libvirt_guest' /etc/nsswitch.conf || {
		echo -e "{*INFO*} you have not configure /etc/nsswitch.conf, trying sed ..."
		sed -ri '/^hosts:/s/files /&libvirt libvirt_guest /' /etc/nsswitch.conf
	}

	echo -e "{VM:INFO} start libvirtd service ..."
	test -x /etc/rc.d/rc.libvirt && /etc/rc.d/rc.libvirt start
	if command -v systemctl >/dev/null; then
		systemctl start libvirtd && systemctl start virtlogd
	fi

	virtdconf=/etc/libvirt/libvirtd.conf
	echo -e "{VM:INFO} checking value of 'unix_sock_group' and 'unix_sock_rw_perms' in $virtdconf ..."
	ls $virtdconf &>/dev/null || chmod +x /etc/libvirt
	awk '/^unix_sock_group = "libvirt"/{c++} /^unix_sock_rw_perms = "0770"/{c++} END {rc=1; if(c==2) rc=0; exit rc}' $virtdconf || {
		echo -e "{*INFO*} confiure $virtdconf ..."
		sh -c "
			sed -ri -e '/#unix_sock_group = \"libvirt\"/s/^#//' -e '/#unix_sock_rw_perms = \"0770\"/s/^#//' $virtdconf
			egrep -e ^unix_sock_group -e ^unix_sock_rw_perms $virtdconf
			systemctl restart libvirtd && systemctl restart virtlogd
		"
	}

	pvirtconf=$vmuserhome/.config/libvirt/libvirt.conf
	su $vmuser -s /bin/bash -c "mkdir -p ${pvirtconf%/*}"
	su $vmuser -s /bin/bash -c "virsh net-info default &>/dev/null && grep -q -w default <(virsh net-list --name)" || {
		#export LIBVIRT_DEFAULT_URI=qemu:///system
		echo 'uri_default = "qemu:///system"' >>$pvirtconf
	}

: <<'COMM'
	qemuconf=/etc/libvirt/qemu.conf
	eval echo -e "{VM:INFO} checking if qemu can read image in ~$vmuser ..."
	egrep -q '^#(user|group) =' "$qemuconf" && {
		sed -i '/^#(user|group) =/s/^#//' "$qemuconf"
	}
COMM

	su $vmuser -s /bin/bash -c "mkdir -p $VMSHOME"

	echo -e "{VM:INFO} setfacl -mu:${QEMU_USER}:rx $vmuserhome ..."
	setfacl -mu:${QEMU_USER}:rx $vmuserhome
	setfacl -mu:${QEMU_USER}:rx -R $VMSHOME
	setfacl -mu:${QEMU_USER}:rx -R $vmuserhome/.cache/virt-manager 2>/dev/null
	getfacl $vmuserhome
	getfacl $VMSHOME

	echo -e "{VM:INFO} checking if ${vmuser} has joined group libvirt ..."
	[[ $(id -u $vmuser) != 0 ]] && {
		if ! id -Gn $vmuser | egrep -q -w libvirt; then
			if getent group libvirt|egrep -q -w $vmuser; then
				: #do nothing
			else
				echo -e "{*INFO*} run: usermod -a -G libvirt $vmuser ..."
				usermod -a -G libvirt $vmuser  #or gpasswd -a $vmuser libvirt
			fi
		fi
	}

	#delete virbr0 if net-start default fail
	grep -q 'virbr0: File exists' < <(virsh net-start default 2>&1 >/dev/null) && {
		echo -e "{*INFO*} remove virbr0 ..."
		ip link delete virbr0
		virsh net-start default
	}

	#re-define default network, if 192.168.122.0 has been used by other ifs
	grep -q 'Network is already in use' < <(virsh net-start default 2>&1 >/dev/null) && {
		echo -e "{*INFO*} re-create Network default ..."
		default_xml=$(virsh net-dumpxml default|sed 's/\.122/.123/g')
		{ virsh net-destroy -- default; virsh net-undefine -- default; } &>/dev/null
		virsh net-define --file <(echo "$default_xml")
		virsh net-start default
		virsh net-autostart default
	}

	su $vmuser -s /bin/bash -c "mkdir -p $perConfDir; touch $perConfDir/kiss-vm"
	echo -e "~~~~~~~~~~~~~~~~~~~~~~~~~~~~ prepare libvirt done! ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
	[[ -z "$force" ]] && tput cup $(tput lines) 0
}

is_available_url() {
	local _url=$1
	curl --connect-timeout 8 -m 16 --output /dev/null -k --silent --head --fail $_url &>/dev/null
}
is_intranet() {
	local iurl=http://$downhostname
	is_available_url $iurl 
}

# functions that work in Intranet
if [[ $Intranet = yes ]]; then
	install_distro_compose() {
		local _file=distro-compose
		command -v $_file >/dev/null || {
			_url=$bkrClientImprovedUrl/utils/$_file
			mkdir -p ~/bin && curl_download ~/bin/$_file $_url && chmod +x ~/bin/$_file
		}
	}
	fetch_distro_list() {
		install_distro_compose
		distro-compose --distrolist
	}
	fetch_distro_trees() {
		local distro=$1
		local arch=$2
		local dtrees=

		#dtrees=$(bkr distro-trees-list --name "$distro" --arch "$arch"|egrep '(released|compose)')
		install_distro_compose
		dtrees=$(distro-compose -d "$distro" --distrotrees|egrep "(released|compose).*${arch}")

		[[ -z "$dtrees" ]] &&
			dtrees=$(distro-compose -d "$distro" --distrotrees|egrep "(Everything).*${arch}")
		echo "$dtrees"
	}
	distro2location() {
		local distro=$1
		local variant=${2:-Server}
		local arch=$GuestARCH

		distrotrees=$(fetch_distro_trees $distro $arch)
		[[ -z "$distrotrees" ]] && return 1

		urls=$(echo "$distrotrees" | awk '$3 ~ /https?:.*'"(${variant}|BaseOS|Everything)"'/{print $3}' | sort -u)
		echo -e "\n====\n$urls\n====\n" >&2

		fastesturl.sh $urls
	}
	getimageurls() {
		local parenturl=$1
		local suffix_pattern=$2
		local rc=1

		local imagenames=$(curl -L -s -k ${parenturl} | sed -nr '/.*"([^"]+'"${suffix_pattern}"')".*/{s//\1/;p}')
		local qcow2Imgs= rawImgs= otherImgs=

		local arch=$GuestARCH
		[[ $arch = aarch64 || $arch = arm64 ]] && arch="(aarch64|arm64)"
		[[ $arch = x86_64 || $arch = amd64 ]] && arch="(x86_64|amd64)"
		imgs=$(egrep "$arch" <<< "$imagenames")
		if [[ -n "$imgs" ]]; then imagenames="$imgs"; else return 1; fi

		for imagename in $imagenames; do
			case $imagename in
			*qcow2*) qcow2Imgs+=$imagename$'\n';;
			*raw*)   rawImgs+=$imagename$'\n';;
			*)       otherImgs+=$imagename$'\n';;
			esac
		done

		[[ -n "$qcow2Imgs" ]] && rawImgs=
		[[ -n "$rawImgs" ]] && otherImgs=

		for image in $qcow2Imgs $rawImgs $otherImgs; do
			echo -e "{VM:INFO} image: $image" >&2
			if [[ -n "${image}" ]]; then
				[[ "${image}" = *Atomic* ]] && continue
				[[ "${image}" = *-ec2* ]] && continue
				[[ "${image}" = *-nocloud* ]] && continue
				echo ${parenturl%/}/${image}
				rc=0
			fi
		done
		return $rc
	}

	distro2repos() {
		local distro=$1
		local url=$2
		local Repos=()
		local _cdnhost="cdn.stage.fedorahat.com"

		if ! is_available_url $url; then
			return 1
		fi

		shopt -s nocasematch
		case ${distro,,} in
		fedora*)
			Repos+=(
				beaker-harness:https://download.devel.redhat.com/beakerrepos/harness/Fedora\$releasever/
			)
			;;
		rhel-5*|rhel5*)
			{ read; read os arch verytag verxosv _; } < <(tac -s ' ' <<<"${url//\// }")
			debug_url=${url/\/os/\/debug}
			osv=${verxosv#RHEL-5-}
			Repos+=(
				Server:${url}/Server
				Cluster:${url}/Cluster
				ClusterStorage:${url}/ClusterStorage
				Client:${url}/Client
				Workstation:${url}/Workstation

				${osv}-debuginfo:${debug_url}
			)
			;;

		rhel-6*|rhel6*|centos6*|centos-6*)
			{ read; read os arch osv ver _; } < <(tac -s ' ' <<<"${url//\// }")
			debug_url=${url/\/os/\/debug}
			Repos+=(
				${osv}:${url}
				${osv}-SAP:${url/$osv/${osv}-SAP}
				${osv}-SAPHAHA:${url/$osv/${osv}-SAPHAHA}

				${osv}-debuginfo:${debug_url}
				${osv}-SAP-debuginfo:${debug_url/$osv/${osv}-SAP}
				${osv}-SAPHAHA-debuginfo:${debug_url/$osv/${osv}-SAPHAHA}
				extras:http://${_cdnhost/fedora/red}/content/dist/rhel/server/6/6Server/$GuestARCH/extras/os
				cdn_os:http://${_cdnhost/fedora/red}/content/dist/rhel/server/6/6Server/$GuestARCH/os
			)
			;;
		rhel-7*|rhel7*|centos7*|centos-7*)
			{ read; read os arch osv ver _; } < <(tac -s ' ' <<<"${url//\// }")
			debug_url=${url/\/os/\/debug\/tree}
			Repos+=(
				${osv}:${url}
				${osv}-optional:${url/$osv/${osv}-optional}
				${osv}-NFV:${url/$osv/${osv}-NFV}
				${osv}-RT:${url/$osv/${osv}-RT}
				${osv}-SAP:${url/$osv/${osv}-SAP}
				${osv}-SAPHAHA:${url/$osv/${osv}-SAPHAHA}

				${osv}-debuginfo:${debug_url}
				${osv}-optional-debuginfo:${debug_url/$osv/${osv}-optional}
				${osv}-NFV-debuginfo:${debug_url/$osv/${osv}-NFV}
				${osv}-RT-debuginfo:${debug_url/$osv/${osv}-RT}
				${osv}-SAP-debuginfo:${debug_url/$osv/${osv}-SAP}
				${osv}-SAPHAHA-debuginfo:${debug_url/$osv/${osv}-SAPHAHA}
				extras:http://${_cdnhost/fedora/red}/content/dist/rhel/server/7/7Server/$GuestARCH/extras/os
				cdn_os:http://${_cdnhost/fedora/red}/content/dist/rhel/server/7/7Server/$GuestARCH/os
				beaker-harness:https://$downhostname/beakerrepos/harness/RedHatEnterpriseLinux7
			)
			;;
		rhel-8*|rhel8*)
			{ read; read os arch osv ver _; } < <(tac -s ' ' <<<"${url//\// }")
			debug_url=${url/\/os/\/debug\/tree}
			read dtype distro <<< $(awk -F/+ '{
				for (i=3;i<NF;i++) { if ($(i+1) ~ /RHEL-/) {
					d=$(i+1)
					if (d ~ /RHEL-[0-9]$/) d=$(i+2)
					print($i, d); break }
				}
			}' <<<"$url")
			read prefix ver time <<< ${distro//-/ }
			[[ "$dtype" =~ rel-eng|nightly ]] || dtype=nightly
			Repos+=(
				BaseOS:${url}
				AppStream:${url/BaseOS/AppStream}
				CRB:${url/BaseOS/CRB}
				HighAvailability:${url/BaseOS/HighAvailability}
				NFV:${url/BaseOS/NFV}
				ResilientStorage:${url/BaseOS/ResilientStorage}
				RT:${url/BaseOS/RT}
				SAP:${url/BaseOS/SAP}
				SAPHANA:${url/BaseOS/SAPHANA}

				BaseOS-debuginfo:${debug_url}
				AppStream-debuginfo:${debug_url/BaseOS/AppStream}
				CRB-debuginfo:${debug_url/BaseOS/CRB}
				HighAvailability-debuginfo:${debug_url/BaseOS/HighAvailability}
				NFV-debuginfo:${debug_url/BaseOS/NFV}
				ResilientStorage-debuginfo:${debug_url/BaseOS/ResilientStorage}
				RT-debuginfo:${debug_url/BaseOS/RT}
				SAP-debuginfo:${debug_url/BaseOS/SAP}
				SAPHANA-debuginfo:${debug_url/BaseOS/SAPHANA}
				Buildroot:http://$downhostname/rhel-8/$dtype/BUILDROOT-8/latest-BUILDROOT-$ver-RHEL-8/compose/Buildroot/$arch/os
				beaker-harness:https://$downhostname/beakerrepos/harness/RedHatEnterpriseLinux8
			)
			;;
		rhel-9*|rhel9*)
			{ read; read os arch osv ver _; } < <(tac -s ' ' <<<"${url//\// }")
			debug_url=${url/\/os/\/debug\/tree}
			read dtype distro <<< $(awk -F/+ '{
				for (i=3;i<NF;i++) { if ($(i+1) ~ /RHEL-/) {
					d=$(i+1)
					if (d ~ /RHEL-[0-9]$/) d=$(i+2)
					print($i, d); break }
				}
			}' <<<"$url")
			read prefix ver time <<< ${distro//-/ }
			dtype=nightly
			Repos+=(
				BaseOS:${url}
				AppStream:${url/BaseOS/AppStream}
				CRB:${url/BaseOS/CRB}
				HighAvailability:${url/BaseOS/HighAvailability}
				NFV:${url/BaseOS/NFV}
				ResilientStorage:${url/BaseOS/ResilientStorage}
				RT:${url/BaseOS/RT}
				SAP:${url/BaseOS/SAP}
				SAPHANA:${url/BaseOS/SAPHANA}

				BaseOS-debuginfo:${debug_url}
				AppStream-debuginfo:${debug_url/BaseOS/AppStream}
				CRB-debuginfo:${debug_url/BaseOS/CRB}
				HighAvailability-debuginfo:${debug_url/BaseOS/HighAvailability}
				NFV-debuginfo:${debug_url/BaseOS/NFV}
				ResilientStorage-debuginfo:${debug_url/BaseOS/ResilientStorage}
				RT-debuginfo:${debug_url/BaseOS/RT}
				SAP-debuginfo:${debug_url/BaseOS/SAP}
				SAPHANA-debuginfo:${debug_url/BaseOS/SAPHANA}
				Buildroot:http://$downhostname/rhel-9/$dtype/BUILDROOT-9/latest-BUILDROOT-9-RHEL-9/compose/Buildroot/$arch/os
				beaker-harness:https://$downhostname/beakerrepos/harness/RedHatEnterpriseLinux9
			)
			;;
		esac
		shopt -u nocasematch
		[[ "$RESTRAINT" = yes ]] && {
			_latest=$(curl -sk https://beaker.engineering.redhat.com/repos/ | tac | sed -rn '/.*>([0-9]+\/)<.*/{s//\1/;p;q}')
			Repos+=(beaker-task:https://beaker.engineering.redhat.com/repos/$_latest)
		}

		for repo in "${Repos[@]}"; do
			read _name _url <<<"${repo/:/ }"
			if is_available_url $_url; then
				echo "$repo"
			else
				echo -e "\033[31m[VM:WARN] this url not available: $_url\033[0m" >&2
			fi
		done
	}
fi

Usage() {
	cat <<-'EOF'
	Usage:
	  vm [create] [distro_or_family_name] [OPTIONs] ...
	  vm <$other_subcmd> [vmname] [OPTIONs] ...

	Options:
	  -h,--help      #Display this help.

	Options for sub-command create:
	  -i <url/path[,bus=$bus[,...]]>
	                 #create VM by import existing disk image, value can be url or local path
	  -I             #create VM by import existing disk image, auto search url according distro name
	  -l <url/path[,bus=$bus[,...]]>
	                 #create VM by using specified location url or local iso file path
	  -L             #create VM by using location, auto search url according distro name
	  -C <iso path>  #create VM by using ISO image
	  --ks <file>    #kickstart file, will auto generate according distro name if omitting
	  -n,--vmname <name>
	                 #VM name, will auto generate according distro name if omitting
	  -f,--force     #over write existing VM with same name
	  -p,--pkginstall <pkgs>
	                 #pkgs in default system repo, install by yum/apt/zypper/pacman
	  -b,--brewinstall <args>
	                 #pkgs in brew system or specified by url, install by internal brewinstall.sh
	                  `-> just could be used in Intranet
	  -g,--genimage  #generate VM image, after install shutdown VM and generate new qcow2.xz file
	  --rm           #like --rm option of docker/podman, remove VM after quit from console
	  --nocloud,--nocloud-init
	                 #don't create cloud-init iso for the image that is not cloud image
	  --osv <variant>
	                 #OS_VARIANT, optional. virt-install will attempt to auto detect this value
	                 # you can get [-osv variant] info by using:
	                 $ osinfo-query os  #RHEL-7 and later
	                 $ virt-install --os-variant list  #RHEL-6
	  --timeo <timeout>
	                 #timeout of virt-install log wait
	  --nointeract   #exit from virsh console after install finish
	  --noauto       #enter virsh console after installing start, or disable windows auto install
	  --saveimage [path]
	                 #save image in path if install with import mode
	  --downloadonly #download image only if there is qcow* image
	  --share        #give others read permission to the VM image file
	  --cpus,--vcpus <N|sockets=1,cores=2,threads=2>
	                 #number of virtual cpus, default: sockets=1,cores=2,threads=2
	                 #see also: virt-install --vcpus=?
	                 #more info: https://www.quora.com/What-is-the-difference-between-CPU-core-die-and-package
	  --arch         #Guest cpu arch. Note: require qemu-system-$arch already installed
	  --qemucpu      #see also: `qemu-system-$arch -machine <$machine> -cpu help`
	  --nvmeboot,--NB #configure the boot disk as nvme device
	                 #ref1: https://blog.christophersmart.com/2019/12/18/kvm-guests-with-emulated-ssd-and-nvme-drives/#comment-1060169
	                 #ref2: https://www.qemu.org/docs/master/system/bootindex.html
	  --boot <arg>   #pass thru to virt-install's --boot options
	                 #see also: `virt-install --boot=?`
	  --graphics <TYPE,opt1=arg1,opt2=arg2,...>
	                 #Possible TYPE values are: vnc, spice, none
	                 #Possible sub-options are: port, listen, tlsPort, websocket, password, gl.enable, gl.rendernode ..
	                 #see also: `virt-install --graphics=?`
	  --video <type> #video device model, Possible value for recent kvm are: cirrus, vga, qxl, virtio
	                 #see also: `virt-install --video=?`
	  --sound <type> #sound MODEL, Possible values are ich6, ich9, ac97, es1370, sb16, pcspk, or default
	                 #see also: `virt-install --sound=?`
	                 #Note: vnc server doesn't support audio well, please enable RDP(Remote Desktop Protocol) in your Guest for sound
	  --msize <size> #memory size, default 2048
	  --dsize <size> #disk size, default 16
	  --if-model <>  #change default model(virtio) of virtual NICs: e1000,rtl8139 
	  --net <$name[,model=$model[,mac=...]]>
	                 #attach tun dev(vnetN) and connect to net $name, optional $model: virtio,e1000,...
	  --net-br <$brname[,model=$model[,mac=...]]>
	                 #attach tun dev(vnetN) and connect to bridge $brname, optional $model: virtio,e1000,...
	  --net-macvtap,--netmacvtap [$sourceNIC[,model=$model[,source_mode=...[,mac=...]]]]
	                 #attach macvtap interface over $sourceNIC, optional $model: virtio,e1000,...
	  --macvtapmode <vepa|bridge>
	                 #macvtap mode
	  --disk <img[,bus=$BUS[,oarg=val,]]>
	                 #attach exist disk file, could be specified multi-times.
	                 #`e.g: --disk /path/to/image --disk image.qcow2,bus=sata
	  --xdisk <size[[,fstype],bus=$BUS[,oarg=val]]>
	                 #create extra image file and attach, could be specified multi-times. size unit is G
	                 #`e.g: --xdisk 10 --xdisk 20,xfs --xdisk=80,ext4,bus=usb
	  --xcdrom <path>
	                 #add extra cdrom
	  --diskbus <$default_disk_bus>
	  --sharedir <shpath[:target]>
	                 #share path between host and guest
	  --nvdimm <nvdimm list>
	                 #one or more nvdimm specification, format: 511+1 (targetSize+labelSize)
	                 #`e.g: --nvdimm="511+1 1023+1" -> two nvdimm device
	                 #`e.g: --nvdimm="511 1023" -> two nvdimm device
	                 #               ^^^^^^^^ default labelSize is 1, if omitting
	                 #Note: will exit if qemu on your system does not support nvdimm, check by:
	                 # PATH=$PATH:/usr/libexec qemu-kvm -device help | grep nvdimm
	  --nvme <size=[,format=]>
	                 #one or more nvme specification.
	                 #`e.g: --nvme=size=10 --nvme=size=20,format=raw
	                 #size units: GB, default format is qcow2
	                 #Note: will exit if qemu on your system does not support nvme, check by:
	                 # PATH=$PATH:/usr/libexec qemu-kvm -device help | grep nvme
	  --vtpm         #enable virtual tpm
	  --kdump        #enable kdump
	  --fips         #enable fips
	  --postrepo <name:url>
	                 #add dnf/yum <repo> after install, only for CentOS/RHEL/Fedora
	                 #`e.g: --postrepo=beaker-tasks:http://beaker.engineering.fedora.com/rpms
	  --repo <name:url>
	                 #add dnf/yum <repo> before install, only for CentOS/RHEL/Fedora
	  --restraint    #enable restraint and start restraintd by default. only for rh-intranet
	  --nosshkey     #don't inject sshkey
	  --debug        #debug mode
	  --vncwait,--vncwait-after-install <pattern,send,timeout>
	                 #wait string:$pattern, then send string:$send
	  --vncput-after-install <msg>
	                 #send string or key event ASAP after virt-intall
	  --xml          #just generate xml
	  --machine <machine type>
	                 #specify machine type #get supported type by: qemu-kvm -machine help
	  --uefi-tpm-sb  #an alias option equivalent to: --boot=firmware=efi,loader_secure=yes --machine=q35 --vtpm
	                  and --vncwait="boot.manager,key:enter key:down key:down key:enter key:enter key:enter"
	  --hostdev,--host-device <device from "virsh nodedev-list">
	                 #passthrough host device to KVM Guest
	                 #see also: virt-install --hostdev=?
	  --hostif,--hostnic,--host-nic <NIC name from "ip -br -c a show">
	                 #passthrough host (pci) NIC to KVM Guest
	  --virt-install-opts #Pass-through virt-install options
	  --qemu-opts    #Pass-through qemu options
	  --qemu-env     #Pass-through qemu env[s]
	  --enable-guest-hypv #enable guest hypervisor, same as --qemu-opts="-cpu host,+vmx" or --qemu-opts="-cpu host,+svm"
	                      #ref: https://www.linux-kvm.org/page/Nested_Guests
	  --disable-guest-hypv #disable guest hypervisor
	  --pxe          #PXE install
	                 #`e.g: vm fedora-32 -n f32 -net-macvtap -pxe --noauto -f
	  --diskless     #diskless install
	                 #`e.g: vm fedora-32 -n f32-diskless --net pxenet --pxe --diskless -f
	  -v,--verbose   #verbose mode
	  -q             #quiet mode, intend suppress the outputs of command yum, curl
	  --reboot       #reboot after vm create/install. for kernel update or ...
	                 #`e.g: vm create RHEL-8.4 -n nfs-client --repo=rname:url -p kernel-4.18.0-306.el8.bz9527 --reboot
	  --default-kernel <regex-pattern>
	                 #set default kernel, and reboot
	                 #`e.g: vm create RHEL-8.4 -n nfs-client --repo=rname:url -p kernel-4.18.0-306.el8.bz9527 --default-kernel=bz9527

	Options for sub-command reboot,viewer or non-linux distro install:
	  -w,--wait[=port] #wait util the 22:sshd(or virt-viewer) port is available before connect

	Options for sub-command exec:
	  -v,--verbose   #verbose mode
	  -x[arg]        #expected return code of sub-command exec, if doesn't match output test fail msg
	                 #`e.g: -x  or  -x0  or  -x1,2,3  or  -x1,10,100-200

	Options for sub-command vncproc:
	  --get,--vncget #get vnc screen and convert to text by gocr
	  --getsc,--vncgetsc
	                 #get vnc screen
	  --put,--vncput <msg>
	                 #send string or key event to vnc server, could be specified multi-times
	                 #`e.g: --put root --put key:enter --put password --put key:enter
	  --putln,--vncputln <msg>
	                 #alias of: --put msg --put key:enter

	Options for sub-command prepare:
	  -u,--user      #prepare configure libvirt for other user
	                 #`e.g: sudo vm prepare -u bar

	Options for Windows Answer File Generator:
	  --win-auto[=<base|cifs-nfs|addsdomain|addsforest>]
	                 #indicate generate answer file media for windows, optional param is the name of answer file template
	                  default: base; see also: /usr/share/AnswerFileTemplates/$template_name/
	  --win-uefi     #support uefi
	  --win-hostname <windows hostname>
	                 #*Specify windows hostname; e.g: win-nfsserv.
	                  Note: length of windows hostname must < 16
	  --win-domain <windows domain>
	                 #*Specify windows domain name; e.g: qetest.org
	  --win-locale <locale>
	                 #default en-US. see also: https://docs.microsoft.com/en-us/windows-hardware/manufacture/desktop/default-input-locales-for-windows-language-packs?view=windows-11
	  --win-user <user>
	                 #Specify user for install and config, default: Administrator
	  --win-passwd <password>
	                 #Specify user's password for windows. for configure AD/DC:
	                  must use a mix of uppercase letters, lowercase letters, numbers, and symbols
	                  default: Sesame~0pen
	  --win-wim-index <wim image index>
	  --win-key <Prodcut key>
	  --win-ad-forest-level <Default|Win2008|Win2008R2|Win2012|Win2012R2|WinThreshold>
	  --win-ad-domain-level <Default|Win2008|Win2008R2|Win2012|Win2012R2|WinThreshold>
	  --win-enable-kdc
	                 #enable AD KDC service(in case use template cifs-nfs)
	  --win-parent-domain <parent-domain>
	                 #Domain name of an existing domain, only for template: 'addsdomain'
	  --win-parent-ip <parent-ip>
	                 #IP address of an existing domain, only for template: 'addsdomain'
	  --win-dfs-target <server:sharename>
	                 #The specified cifs share will be added into dfs target.
	  --win-openssh <url|local_path>
	                 #url/path to download/copy OpenSSH-Win64.zip
	  --win-virtio-drv <url|local_path>
	                 #url/path to download/copy virtio-win.iso
	  --win-download-url <url|local_path>
	                 #url to download extra drivers/programs to anserfile media:
	  --win-run <command line>
	                 #powershell cmd line need autorun and reboot
	                 #e.g: --win-run='./MLNX_VPI_WinOF-5_50_54000_All_win2019_x64.exe /S /V"qb /norestart"'
	  --win-run-post <command line>
	                 #powershell cmd line need autorun without reboot
	                 #e.g: --win-run-post='ipconfig /all; ibstat'
	  --win-static-ip-ext <ip>
	                 #set static ip for the nic that connect to public network
	  --win-static-ip-int <ip>
	                 #set static ip for the nic that connect to internal libvirt network
	  --win-if-model <> #change default windows if model(e1000): virtio,rtl8139

	EOF
	[[ "$Intranet" = yes ]] && cat <<-EOF
	Examples for create vm from distro-db (Intranet):
	  $P [create] # will enter a TUI show you all available distros that could auto generate source url
	  $P [create] RHEL-7.7                           # install RHEL-7.7 from cloud-image(by default)
	  $P [create] RHEL-6.10 -L                       # install RHEL-6.10 from Location(by -L option)

	  $P [create] RHEL-8.1.0 -f -p "vim wget git"    # -f force install VM and ship pkgs: vim wget git
	  $P [create] RHEL-8.1.0 -brewinstall 23822847   # ship brew scratch build pkg (by task id)
	  $P [create] RHEL-8.1.0 -brewinstall kernel-4.18.0-147.8.el8  # ship brew build pkg (by build name)
	  $P [create] RHEL-8.1.0 -brewinstall "lstk -debug"            # ship latest brew build release debug kernel
	  $P [create] RHEL-8.1.0 -brewinstall "upk -debug"             # ship latest brew build upstream debug kernel
	  $P [create] RHEL-8.1.0 --nvdimm "511 1022+2"                 # add two nvdimm device
	  $P [create] RHEL-8.3.0 --nvme "size=32 size=16,format=raw"   # add two nvme device
	  $P [create] rhel-8.2.0%                        # nightly 8.2 # fuzzy search distro: ignore-case
	  $P [create] rhel-8.2*-????????.?               # rtt 8.2     # - and only support glob * ? syntax, and SQL %(same as *)
	  $P [create] rhel-8.2% -enable-guest-hypv -msize=\$((8*1024)) -dsize=120  # enable hyper-v on guest

	EOF
	cat <<-EOF
	Examples for create vm from distro-db (Internet):
	  $P [create] # will enter a TUI show you all available distros that could auto generate source url
	  $P [create] <FreeBSD-13.0 | Rocky-8 | fedora-35 | debian-10 | openSUSE-leap-15.3>
	  $P [create] CentOS-8-stream -b ftp://url/path/x.rpm
	  $P [create] Rocky-8 -p "jimtcl vim git make gcc"
	  $P [create] Rocky-8 -enable-guest-hypv -msize=8G -dsize=120  # enable hyper-v on guest

	Examples for create vm from local image or url:
	  $P [create] freebsd-130 -i ~/myimages/download/FreeBSD-13.0-RELEASE-amd64.qcow2.xz --nocloud-init
	  $P [create] debian-10 -i /mnt/vm-images/debian-10-openstack-amd64.qcow2
	  $P [create] openSUSE-15.2 -i ~/myimages/openSUSE-Leap-15.2-OpenStack.x86_64.qcow2
	  $P [create] debian-test -i https://cdimage.debian.org/cdimage/openstack/testing/debian-testing-openstack-amd64.qcow2
	  $P [create] centos-8 -l https://cloud.centos.org/centos/8/x86_64/images/
	  $P [create] rhel-8.4.0 -l ~/myimages/download/RHEL-8.4.0-any-x86_64-dvd1.iso -n rhel84-from-iso

	Examples for create vm from local iso file manually:
	  $P create Windows-11 -n win11-virtio -C win11_english_x64.iso --xcdrom virtio-win-0.1.208.iso \
	      --machine q35 --boot=firmware=efi,loader_secure=yes --vtpm \
	      --msize 8G --dsize 80 --hostdev=00:1b.0
	  $P create OpenIndiana -n opensolaris -C OI-hipster-text-20211031.iso -msize 8G -dsize 120

	Examples for auto create Windows VM (if have not product-key, must use Evaluation release)
	  $P create Windows-7  -C ~/Downloads/cn_windows_7_ultimate_with_sp1_x64_dvd_u_677408.iso -xdisk 20,bus=virtio -n win7-auto -f
	  $P create Windows-7  -C ~/Downloads/Win7_Ult_SP1_English_x64.iso -f --win-wim-index=3  #-n win7-auto
	  $P create Windows-10 -C ~/Downloads/Win10-Evaluation.iso -f         #-n win10-auto
	  $P create Windows-11 -C ~/Downloads/Win11-Evaluation.iso -f         #-n win11-auto
	  $P create Windows-server-2012r2 -C ~/Downloads/Win2012r2.iso --win-key="\${key:-W3GGN-FT8W3-Y4M27-J84CP-Q3VJ9}"  -f #-n win2012r2-auto
	  $P create Windows-server-2012r2 -C ~/Downloads/Win2012r2-Evaluation.iso -f #-n win2012r2-auto
	  $P create Windows-server-2019   -C ~/Downloads/Win2019-Evaluation.iso --win-auto=cifs-nfs -f #-n win2019-cifs-nfs

	Examples for other sub-commands:
	  $P prepare [-u user] #check/install/configure libvirt and other dependent packages
	  $P enable-nested-vm  #enable nested on host

	  $P list              #list all VMs       //you can use ls,li,lis* instead list
	  $P login [VM]        #login VM via ssh   //you can use l,lo,log* instead login
	  $P console [VM]      #log VM via console //you can use co,con,cons* instead console
	  $P delete [VM list]  #delete VMs         //you can use d,de,del*,r,rm instead delete
	  $P ifaddr [VM]       #show ip address    //you can use i,if,if* instead ifaddr
	  $P viewer [VM]       #call virt-viewer   //you can use vi,vie,view instead
	  $P vnc [VM]          #show vnc host:port //you can use vn instead
	  $P vnc [-get|-put|-putln] [VM]           #read screen text or send string thru vnc
	  $P xml [VM]          #dump vm xml file   //you can use x,xm instead xml
	  $P edit [VM]         #edit vm xml file   //you can use ed,ed* instead edit
	  $P exec [-v] [-x] "\$VM" -- "cmd"  #login VM and exec cmd  //you can use e,ex,ex* instead exec
	  $P reboot [-w] [VM]  #reboot VM          //option /w indicate wait until reboot complete(port 22 is available)
	  $P stop [VM]         #stop/shutdonw VM   //nil
	  $P start [VM]        #start VM           //nil
	  $P stat [VM]         #get VM state       //see also: virsh domstate <domain>
	  $P clone <VM> [new-vmname]  #clone VM    //see also: virt-clone + virt-sysprep
	  $P cpfrom <VM> <file/dir_in_vm> <dst_dir/file_in_host>
	  $P cpto   <VM> <files/dirs_in_host ...> <dst_dir_in_vm>
	  $P add.iso <VM> <iso-file>               //alias of virsh attach-disk \$vm \$iso \$target --targetbus=sata --type cdrom --mode readonly
	  $P add.disk <VM> <disk-file[size=,drv=,bus=]> //alias of virsh attach-disk \$vm \$diskf \$target [--subdriver=qcow2,raw, --targetbus=scsi,sata,virtio,]
	  $P add.if <VM> <network>                 //alias of virsh attach-interface --type network --domain \$vm --source \$network
	  $P add.if.bridge <VM> <bridge>           //alias of virsh attach-interface --type network --domain \$vm --source \$bridge
	  $P add.if.direct <VM> <srcif>            //alias of virsh attach-interface --type direct --domain \$vm --source \$(get_default_if)
	  $P add.if.passthru <VM> <hostif|pciAddr> //alias of virsh attach-interface --type hostdev --domain \$vm --source \$hostif_or_pciaddr

	  $P netls             #list all virtual network
	  $P netcreat netname=nat-net brname=virbrM subnet=10 [forward=nat]  #create network 'nat-net' with 'nat' and subnet: 192.168.10.0
	  $P netcreat netname=isolated-net brname=virbrN subnet=20 forward=no  #create network 'isolated-net' with subnet: 192.168.20.0
	  $P netcreat netname=pxe brname=virpxebrN subnet=172.25.250.0 tftproot=/var/lib/tftpboot bootpfile=pxelinux/pxelinux.0
	  $P netinfo netname   #show detail info of virtual network 'netname'
	  $P netstart netname  #start virtual network 'netname'
	  $P netdel netname    #delete virtual network 'netname'
	EOF
}

expandrc() {
	local rcrange=$1
	local rclist=()
	for rc in ${rcrange//,/ }; do
		if [[ "$rc" =~ ^[0-9]+$ ]]; then
			rclist+=($rc)
		elif [[ "$rc" =~ ^[0-9]+-[0-9]+$ ]]; then
			eval rclist+=({${rc/-/..}})
		fi
	done
	echo -n ${rclist[@]}
}

is_bridge() {
	local ifname=$1
	[[ -z "$ifname" ]] && return 1
	ip -d a s $ifname | grep -qw bridge
}

get_default_if() {
	local notbr=$1  #indicate get real NIC not bridge
	local _iface= iface=
	local type=

	ifaces=$(ip route | awk '/^default/{print $5}')
	for _iface in $ifaces; do
		type=$(ip -d link show dev $_iface|sed -n '3{s/^\s*//; p}')
		[[ -z "$type" || "$type" = altname* || "$type" = bridge* ]] && {
			iface=$_iface
			break
		}
	done
	if [[ -n "$notbr" ]] && is_bridge $iface; then
		# ls /sys/class/net/$iface/brif
		if command -v brctl >/dev/null; then
			brctl show $iface | awk 'NR==2 {print $4}'
		else
			ip link show type bridge_slave | awk -F'[ :]+' '/master '$iface' state UP/{print $2}' | head -n1
		fi
		return 0
	fi
	echo $iface
}

# command line parse
orig_at=("$@")
_at=`getopt -o hu:d:Ll:C:fn:gb:p:Ii:rvdx::Pqw:: \
	--long help \
	--long prepare \
	--long user: \
	--long enable-nested-vm \
	--long debug \
	--long ks: \
	--long rm \
	--long osv: \
	--long timeo: \
	--long os-variant: \
	--long force \
	--long vmname: \
	--long genimage \
	--long xzopt: \
	--long brewinstall: \
	--long pkginstall: \
	--long geturl \
	--long getvmname \
	--long nocloud-init --long nocloud \
	--long cpus: --long vcpus: \
	--long arch: \
	--long qemucpu: \
	--long nvmeboot --long NB \
	--long boot: \
	--long video: \
	--long sound: \
	--long graphics: \
	--long msize: \
	--long dsize: \
	--long if-model: \
	--long net: \
	--long net-br: \
	--long net-macvtap:: --long netmacvtap:: \
	--long macvtapmode: \
	--long nointeract \
	--long noauto \
	--long saveimage:: --long sa:: \
	--long downloadonly \
	--long share \
	--long ready \
	--long diskbus: --long bus: \
	--long disk: \
	--long xdisk: \
	--long xcdrom: \
	--long sharedir: \
	--long nvdimm: \
	--long nvme: \
	--long vtpm \
	--long kdump \
	--long fips \
	--long postrepo: \
	--long repo: \
	--long restraint \
	--long nosshkey \
	--long getsc --long vncgetsc \
	--long get --long vncget \
	--long put: --long vncput: \
	--long putln: --long vncputln: \
	--long vncwait: --long vncwait-after-install: \
	--long vncput-after-install: \
	--long xml \
	--long machine: \
	--long uefi-tpm-sb \
	--long hostdev: --long host-device: \
	--long hostif: --long hostnic: --long host-nic: \
	--long virt-install-opts: \
	--long qemu-opts: \
	--long qemu-env: \
	--long enable-guest-hypv \
	--long disable-guest-hypv \
	--long pxe \
	--long diskless \
	--long verbose \
	--long reboot \
	--long default-kernel: \
	--long wait:: \
	--long win-auto:: \
	--long win-uefi \
	--long win-user: \
	--long win-passwd: \
	--long win-wim-index: \
	--long win-key: \
	--long win-locale: \
	--long win-hostname: \
	--long win-domain: \
	--long win-ad-forest-level: \
	--long win-ad-domain-level: \
	--long win-static-ip-ext: \
	--long win-static-ip-int: \
	--long win-enable-kdc \
	--long win-parent-domain: \
	--long win-parent-ip: \
	--long win-openssh: \
	--long win-virtio-drv: \
	--long win-download-url: \
	--long win-run: \
	--long win-run-post: \
	--long win-dfs-target: \
	--long win-if-model: \
    -a -n "$0" -- "$@"`
[[ $? != 0 ]] && { exit 1; }
eval set -- "$_at"

_netarg() {
	local arg="$1"
	if [[ -z "$arg" ]]; then arg=model=$DEFAULT_IF_MODEL; elif [[ "$arg" != *=* ]]; then arg=model=$arg; fi;
	echo -n "$arg"
}
while true; do
	case "$1" in
	-h|--help) Usage; shift 1; exit 0;;
	--prepare) ONLY_PREPARE=yes; shift 1;;
	-u|--user) VMUSER=$2; shift 2;
		eval VMSHOME=~$VMUSER/VMs
		eval ImagePath=~$VMUSER/myimages
		eval perConfDir=~$VMUSER/.config/${_repon}
		eval oldperConfDir=~$VMUSER/.config/kiss-vm
		;;
	--enable-nested-vm) ENABLE_NESTED=yes; shift 1;;
	-d)        Distro=$2; shift 2;;
	-C)        InstallType=cdrom; Isourl=$2; shift 2;;
	-l)        InstallType=location; read Location BOOT_DISK_ATTRS <<<"${2/,/ }"; shift 2;;
	-L)        InstallType=location; shift 1;;
	-i)        InstallType=import; read Imageurl BOOT_DISK_ATTRS <<<"${2/,/ }"; shift 2;;
	-I)        InstallType=import; shift 1;;
	-P|--pxe)  InstallType=pxe; shift 1;;
	--diskless) DISKLESS=yes; shift 1;;
	--ks)      KSPath=$2; shift 2;;
	--rm)      RM=yes; shift 1;;
	--xzopt)          XZ="$2"; shift 2;;
	-f|--force)       OVERWRITE="yes"; FORCE=yes; shift 1;;
	-n|--vmname)      VMName="$2"; shift 2;;
	-g|--genimage)    GenerateImage=yes; shift 1;;
	--geturl)         OnlyGetUrl=yes; shift 1;;
	--getvmname)      OnlyGetVMName=yes; shift 1;;
	-b|--brewinstall) BPKGS+=" $2"; shift 2;;
	-p|--pkginstall)  PKGS+=" $2"; shift 2;;
	--osv|--os-variant) VM_OS_VARIANT="$2"; shift 2;;
	--timeo)         VirtInstallTimeOut="$2"; shift 2;;
	--nocloud*)      NO_CLOUD_INIT="yes"; shift 1;;
	--dsize)         dsizeflag=1; DSIZE="${2%[Gg]}"; shift 2;;
	--msize)         MSIZE="$2"; shift 2;;
	--cpus|--vcpus)  SPECIFIED_VCPUS=yes; VCPUS="$2"; shift 2;;
	--arch)	         GuestARCH="$2"; ARCH_OPT=--arch=$GuestARCH; shift 2;;
	--qemucpu)       QEMU_CPU=$2; QEMU_OPTS+=("--qemu-commandline=-cpu $2"); shift 2;;
	--nvmeboot|--NB) NVME_BOOT=yes; shift 1;;
	--boot)          BOOT_OPTS+=("--boot=$2"); shift 2;;
	--graphics)      GRAPHICS_OPT="--graphics=$2"; shift 2;;
	--video)         SPECIFIED_VIDEO=yes; [[ -z "$2" || "$2" = auto ]] && VIDEO_OPT= || VIDEO_OPT="--video=$2"; shift 2;;
	--sound)         SOUND_OPT="--sound=$2"; shift 2;;
	--nointeract)    INTERACT="no"; shift 1;;
	--noauto)        NOAUTO="yes"; shift 1;;
	--if-model)      DEFAULT_IF_MODEL="$2"; shift 2;;
	--net)
		read netname _arg <<<"${2/,/ }"
		if [[ -n "$netname" && "$netname" != none ]]; then
			NETWORK_OPTS+=" --network=network=$netname,$(_netarg $_arg)";
		else
			NETWORK_OPTS=" "
		fi
		shift 2;;
	--net-br)
		read brname _arg <<<"${2/,/ }"
		NETWORK_OPTS+=" --network=bridge=$brname,$(_netarg $_arg)"; shift 2;;
	--net-macvtap|--netmacvtap)
		read srcif _arg <<<"${2/,/ }"
		[[ "$srcif" = - || "$srcif" = default ]] && srcif=
		srcif=${srcif:-$(get_default_if)}
		_arg=$(_netarg $_arg)
		[[ "$_arg" != *source_mode=* ]] && _arg=source_mode=$MacvtapMode,$_arg
		NETWORK_OPTS+=" --network=type=direct,source=$srcif,$_arg"; shift 2;;
	--macvtapmode)   MacvtapMode="$2"; shift 2;;
	--saveimage|--sa)
		SAVE_IMAGE="yes"
		DownloadImagePath=${2}
		shift 2
		;;
	--downloadonly)  SAVE_IMAGE="yes"; DOWNLOAD_ONLY="yes"; InstallType=import; shift 1;;
	--share)         VMSHARE="yes"; shift 1;;
	-r|--ready)      KISS_VM_READY=yes; shift 1;;
	--diskbus|--bus) DEFAULT_DISK_BUS="$2"; shift 2;;
	--disk)          DISKS+=("$2"); shift 2;;
	--xdisk)         EXTRA_DISKS+=("$2"); shift 2;;
	--xcdrom)        EXTRA_CDROMS+=("$2"); shift 2;;
	--sharedir)      SHARE_DIRS+=("$2"); shift 2;;
	--nvdimm)        NVDIMM_LIST+=($2); shift 2;;
	--nvme)          NVME_DEVS+=($2); shift 2;;
	--vtpm)          VTPM=yes; shift 1;;
	--kdump)         kdump=yes; shift 1;;
	--fips)          fips=yes; shift 1;;
	--postrepo)      POST_REPOS+=("$2"); shift 2;;
	--repo)          _REPO_OPTS+=" --repo $2"; shift 2;;
	--restraint)     export RESTRAINT=yes; INTERACT="no"; shift 1;;
	--nosshkey)      NO_SSHKEY=yes; shift 1;;
	--debug)         DEBUG=yes; shift 1;;
	--get|--vncget)  VNCGET=yes; shift 1;;
	--getsc|--vncgetsc) VNCGETSC=yes; shift 1;;
	--put|--vncput)  VNCPUTS+=("$2"); shift 2;;
	--putln|--vncputln)     [[ -n "$2" ]] && VNCPUTS+=("$2" "key:enter") || VNCPUTS+=("key:enter"); shift 2;;
	--vncwait|--vncwait-after-install) VNCWAIT_AFTER_INSTALL+=("$2"); shift 2;;
	--vncput-after-install) VNCPUT_AFTER_INSTALL="$2"; shift 2;;
	--xml)           XML=--print-xml; shift 1;;
	--machine)       MACHINE_OPT="--machine=$2"; shift 2;;
	--uefi-tpm-sb)   UEFI_TPM_SB=yes; shift 1;;
	--hostdev|--host-device)    HOST_DEV_LIST+=("$2"); shift 2;;
	--hostif|--hostnic|--host-nic)  HOST_NIC_LIST+=("$2"); shift 2;;
	--virt-install-opts)    VIRT_INSTALL_OPTS+=("$2"); shift 2;;
	--qemu-opts)     QEMU_OPTS+=("--qemu-commandline=$2"); shift 2;;
	--qemu-env)      QEMU_ENV+=("--qemu-commandline=env=$2"); shift 2;;
	--enable-guest-hy*) ENABLE_L2VM=yes; shift 1;;
	--disable-guest-hy*) ENABLE_L2VM=no; shift 1;;
	-x) expectedRC=${2:-0}; expectedrc=$(expandrc ${expectedRC#=}); shift 2;;
	-v|--verbose)    VERBOSE=yes; shift 1;;
	-q)              QUIET=yes; shift 1;;
	--reboot)        REBOOT=yes; shift 1;;
	--default-kernel) DEFAULT_KERNEL="$2"; shift 2;;
	-w|--wait)       WAIT=yes; WAIT_PORT="${2:-22}"; shift 2;;
	--win-*)
		WIN_AUTO=yes
		DEFAULT_DISK_BUS=sata
		WIN_TEMPLATE=${WIN_TEMPLATE:-base}
		WIN_IF_MODEL=${WIN_IF_MODEL:-e1000}
		case "$1" in
		--win-auto)		[[ -n "$2" ]] && WIN_TEMPLATE="${2}"; shift 2;;
		--win-uefi)		WIN_UEFI_OPT="--uefi"; shift 1;;
		--win-user)		WIN_USER="$2"; shift 2;;
		--win-passwd)		WIN_PASS="$2"; shift 2;;
		--win-wim-index)	WIN_WIM_IMAGE_INDEX="$2"; shift 2;;
		--win-openssh)		WIN_OpenSSH_OPT=("--openssh=$2"); shift 2;;
		--win-virtio-drv)	WIN_VirtioDrv_OPT=("--virtio-win=$2"); shift 2;;
		--win-key)		WIN_KEY_OPT="--product-key=$2"; shift 2;;
		--win-hostname)		WIN_HOSTNAME="$2"; shift 2;;
		--win-domain)		WIN_DOMAIN_OPT="--domain=$2"; shift 2;;
		--win-locale)		WIN_LOCALE_OPT="--locale=$2"; shift 2;;
		--win-enable-kdc)	WIN_KDC_OPT="--enable-kdc"; shift 1;;
		--win-dfs-target)	DFS=yes; DFS_TARGET="$2"; WIN_DFS_TARGET_OPT="--dfs-target=$2"; shift 2;;
		--win-ad-forest-level)	WIN_AD_FOREST_LEVEL_OPT="--ad-forest-level=$2"; shift 2;;
		--win-ad-domain-level)	WIN_AD_DOMAIN_LEVEL_OPT="--ad-domain-level=$2"; shift 2;;
		--win-parent-domain)	WIN_PARENT_DOMAIN_OPT="--parent-domain=$2"; shift 2;;
		--win-parent-ip)	WIN_PARENT_IP_OPT="--parent-ip=$2"; shift 2;;
		--win-download-url)	WIN_DL_URL_OPTS+=("--download-url=$2"); shift 2;;
		--win-run)		WIN_RUN_CMD_OPTS+=("--run=$2"); shift 2;;
		--win-run-post)		WIN_RUN_POST_CMD_OPTS+=("--run-post=$2"); shift 2;;
		--win-static-ip-ext)	WIN_STATIC_IP_EXT="$2"; shift 2;;
		--win-static-ip-int)	WIN_STATIC_IP_INT="$2"; shift 2;;
		--win-if-model)		WIN_IF_MODEL="$2"; CUSTOM_WIN_IF_MODEL=yes; shift 2;;
		*) shift;;
		esac
		;;
	--) shift; break;;
	esac
done

DownloadImagePath=${DownloadImagePath:-$ImagePath/download}

[[ ${#WIN_HOSTNAME} -gt 15 ]] && {
	echo -e "{VM:ERROR} length of windows hostname($WIN_HOSTNAME) should < 16" >&2
	exit 1
}

QEMU_KVM=$(PATH=/usr/libexec:$PATH command -v qemu-kvm qemu-system-x86)
qemu_kvm_nvr() { echo -n qemu-kvm-$($QEMU_KVM --version 2>/dev/null | awk '{print $4; exit}'); }
libvirt_nvr() { echo -n "libvirt-$(virsh --version 2>/dev/null)"; }
if [[ "${#NVDIMM_LIST[@]}" -gt 0 ]]; then
	if ! grep -q nvdimm < <($QEMU_KVM -device help); then
		echo -e "{VM:WARN} $(qemu_kvm_nvr) doesn't support nvdimm driver."
		exit 1
	fi
fi
if [[ "${#NVME_DEVS[@]}" -gt 0 ]]; then
	if ! grep -q nvme < <($QEMU_KVM -device help); then
		echo -e "{VM:WARN} $(qemu_kvm_nvr) doesn't support nvme driver."
		exit 1
	fi
fi
if [[ ${#SHARE_DIRS[@]} -gt 0 ]]; then
	if vercmp "$(libvirt_nvr)" lt libvirt-6.2; then
		echo -e "{VM:WARN} $(libvirt_nvr) doesn't support virtiofs driver that's required by --sharedir option."
		exit 1
	fi
fi

[[ "$QUIET" = yes ]] && {
	yumOpt=-q
	curlOpt=-s
}

# __main__
# check if support Virtualization
support_virtualization() {
	local rc=1
	case ${OSTYPE,,} in
	linux-gnu*) egrep -q -wo '(vmx|svm)' /proc/cpuinfo && rc=0;;
	freebsd)    dmesg | grep -q -e VT-x: -e SVM: && rc=0;;
	*)          echo "{VM:WARN} unsupported OS/platform." >&2;;
	esac
	return $rc
}
if ! support_virtualization; then
	echo -e "{VM:WARN} current machine doesn't support Virtualization, show help info with\n  $P -h"
	exit 1
fi

is_slackware && export PATH=/usr/local/sbin:/usr/sbin:/sbin:$PATH
[[ "$1" = prepare ]] && {
	KISS_VM_READY=; ONLY_PREPARE=yes
	FORCE_PREPARE=$FORCE
}
[[ "$KISS_VM_READY" != yes ]] && {
	if [[ -t 1 ]]; then
		prepare_kiss_vm $FORCE_PREPARE &>/dev/tty
	else
		#echo -e "{VM:WARN} there's not /dev/tty file redirect prepare_kiss_vm msg to stderr" >&2
		prepare_kiss_vm $FORCE_PREPARE >&2
	fi
	[[ "$ONLY_PREPARE" = yes ]] && exit
}

#first time
[[ $(id -u) != 0 ]] && ! is_slackware && {
	if ! id | egrep -qw libvirt; then
		expect <(cat <<-EOF
		set timeout -1
		log_user 0
		spawn -noecho newgrp libvirt
		expect "*\[>\$]" { send ": newgrp libvirt; $P ${orig_at[@]}; exit \$?\r"; interact; }
		foreach {pid spawnid os_error_flag value} [wait] break
		exit \$value
		EOF
		)
		exit $?
	fi
}

enable_nested_kvm() {
	if [[ "$OSTYPE" = linux-gnu* ]]; then
		local kmodule=$(lsmod|awk '$1 == "kvm" {print $NF}')
		local vendor=${kmodule#kvm_}

		{
		echo "options kvm-$vendor nested=1"

		[[ "$vendor" = intel ]] && cat <<-EOF
		options kvm-$vendor enable_shadow_vmcs=1
		options kvm-$vendor enable_apicv=1
		options kvm-$vendor ept=1
		EOF
		} | sudo tee /etc/modprobe.d/kvm-nested.conf >/dev/null

		if [[ $(< /sys/module/$kmodule/parameters/nested) != [Yy1] ]]; then
			modprobe -r $kmodule || {
				echo -e "{VM:WARN} stop tasks are using module $kmodule, and try again"
				return 1
			}
			modprobe $kmodule
		fi
		cat /sys/module/$kmodule/parameters/nested
	fi
}
[[ "$ENABLE_NESTED" = yes ]] && {
	enable_nested_kvm
	exit $?
}

GuestARCH=${GuestARCH:-$HostARCH}
if [[ "$GuestARCH" = "$HostARCH" ]]; then
	virtualizationOption=--hvm
else
	virtualizationOption=--virt-type=qemu
	case "$GuestARCH" in
	(aarch64)
		#set default qemu cpu type cortex-a72 for aarch64, it works on RHEL aarch64 build
		[[ -z "$QEMU_CPU" ]] && QEMU_OPTS+=("--qemu-commandline=-cpu cortex-a72")
		;;
	(s390x|ppc*)
		#qemu-system-s390x doesn't support --video=sql on fedora-35
		[[ -z "$SPECIFIED_VIDEO" ]] && VIDEO_OPT="--video=virtio"
		;;
	(riscv*)
		[[ -z "$MACHINE_OPT" ]] && QEMU_OPTS+=("--qemu-commandline=-machine virt")
		[[ -z "$SPECIFIED_VIDEO" ]] && VIDEO_OPT=""
		[[ -z "$SPECIFIED_VCPUS" ]] && VCPUS=8
		;;
	esac
fi

case "$GuestARCH" in
(s390*) _MSIZE=2048;;
esac

support_nested_kvm() {
	local rc=1
	if [[ "$OSTYPE" = linux-gnu* && "$HostARCH" = "$GuestARCH" ]]; then
		local kmodule=$(lsmod|awk '$1 == "kvm" {print $NF}')
		local paramf=/sys/module/$kmodule/parameters/nested

		if [[ -f $paramf && $(< $paramf) = [Yy1] ]]; then
			rc=0
		fi
	fi
	return $rc
}
support_nested_kvm && ENABLE_L2VM=${ENABLE_L2VM:-yes}
[[ "$ENABLE_L2VM" = yes ]] && {
	kmodule=$(lsmod|awk '$1 == "kvm" {print $NF}')
	cpuvendor=${kmodule#kvm_}
	qemucpu=${QEMU_CPU:-host}
	if [[ "$qemucpu" != host ]]; then
		_cpulist=$($QEMU_KVM -cpu help|grep "$qemucpu")
		if echo "$_cpulist"|grep -qw Intel; then
			cpuvendor=intel
		elif echo "$_cpulist"|grep -qw AMD; then
			cpuvendor=amd
		fi
	fi
	case $cpuvendor in
	intel) QEMU_OPTS+=("--qemu-commandline=-cpu $qemucpu,+vmx");;
	amd) QEMU_OPTS+=("--qemu-commandline=-cpu $qemucpu,+svm");;
	*) QEMU_OPTS+=("--qemu-commandline=-cpu $qemucpu,+fixme");;
	esac
}

VCPUN=$(vcpuN "$VCPUS")

run -as=$VMUSER mkdir -p $RuntimeTmp ${DownloadImagePath}

# sub-command
[[ $P = vmc || $P = vm ]] || true && {
	subcmd=$1
	case "$subcmd" in
	h|\?|help) Usage|less; exit;;
	prepare) shift; [[ "$1" = -d ]] && shift; prepare_kiss_vm force; exit $?;;
	enable-nested-vm) shift; [[ "$1" = -d ]] && shift; enable_nested_kvm; exit $?;;
	create|creat) shift;;
	r|rm|d|de|del*) shift; [[ "$1" = -d ]] && shift; vmdelete "$@"; exit $?;;
	co|con|cons*) shift; [[ "$1" = -d ]] && shift; vmconsole "$@"; exit $?;;
	port|port*) shift; [[ "$1" = -d ]] && shift; vmport_available "$@"; exit $?;;
	l|lo|log*) shift; [[ "$1" = -d ]] && shift; vmlogin "$@"; exit $?;;
	cpfrom|cpf*) shift; [[ "$1" = -d ]] && shift; vmcopyfrom "$@"; exit $?;;
	cpto|cpt*) shift; [[ "$1" = -d ]] && shift; vmcopyto "$@"; exit $?;;
	e|ex|ex*) shift; [[ "$1" = -d ]] && shift; vmexec "$@"; exit $?;;
	ls|li|lis|list) shift; [[ "$1" = -d ]] && shift; vmlist "$@"; exit $?;;
	i|if|if*) shift; [[ "$1" = -d ]] && shift; vmifaddr "$@"; exit $?;;
	vi|vie|view*) shift; [[ "$1" = -d ]] && shift; vmviewer "$@"; exit $?;;
	vn|vnc|vncp*) shift; [[ "$1" = -d ]] && shift; vmvncproc "$@"; exit $?;;
	x|xm*) shift; [[ "$1" = -d ]] && shift; vmxml "$@"; exit $?;;
	ed|ed*) shift; [[ "$1" = -d ]] && shift; vmedit "$@"; exit $?;;
	reboot|reb|re*) shift; [[ "$1" = -d ]] && shift; vmreboot "$@"; exit $?;;
	stop|sto*) shift; [[ "$1" = -d ]] && shift; vmstop "$@"; exit $?;;
	start|star*) shift; [[ "$1" = -d ]] && shift; vmstart "$@"; exit $?;;
	stat) shift; [[ "$1" = -d ]] && shift; vmstat "$@"; exit $?;;
	blk*|srcfiles) shift; [[ "$1" = -d ]] && shift; _vmblklist "$@"; exit $?;;
	rootdir) shift; [[ "$1" = -d ]] && shift; vmrootdir "$@"; exit $?;;
	homedir) shift; [[ "$1" = -d ]] && shift; vmhomedir "$@"; exit $?;;
	clone) shift; [[ "$1" = -d ]] && shift; vmclone "$@"; exit $?;;
	add.iso) shift; [[ "$1" = -d ]] && shift; vmadd_iso "$@"; exit $?;;
	add.disk) shift; [[ "$1" = -d ]] && shift; vmadd_disk "$@"; exit $?;;
	add.if) shift; [[ "$1" = -d ]] && shift; vmadd_if "$@"; exit $?;;
	add.if.direct) shift; [[ "$1" = -d ]] && shift; vmadd_if_direct "$@"; exit $?;;
	add.if.bridge) shift; [[ "$1" = -d ]] && shift; vmadd_if_bridge "$@"; exit $?;;
	add.if.hostif) shift; [[ "$1" = -d ]] && shift; vmadd_if_hostif "$@"; exit $?;;
	add.if.passthr) shift; [[ "$1" = -d ]] && shift; vmadd_if_passthr "$@"; exit $?;;
	passthr) shift; [[ "$1" = -d ]] && shift; vmpassthr "$@"; exit $?;;
	netls) shift; [[ "$1" = -d ]] && shift; netls "$@"; exit $?;;
	net|netcreat*) shift; [[ "$1" = -d ]] && shift; netcreate "$@"; exit $?;;
	netinfo) shift; [[ "$1" = -d ]] && shift; netinfo "$@"; exit $?;;
	netstart) shift; [[ "$1" = -d ]] && shift; netstart "$@"; exit $?;;
	netdel|netdelete) shift; [[ "$1" = -d ]] && shift; netdelete "$@"; exit $?;;
	esac
}
[[ -n "$VNCPUTS" || -n "$VNCGET" || -n "$VNCGETSC" ]] && { vmvncproc "$@"; exit $?; }

declare -A distroInfo
dbfile=${_confdir}/distro-db.bash
owndbfile=$perConfDir/distro-db.bash
if is_intranet; then
	#timeout 2 hostname -A|grep -q '\.pek2\.' && downhostname=${downhostname/devel/eng.pek2}
	IntranetBaseUrl=http://$downhostname/qa/rhts/lookaside
else
	Intranet=no
	baseUrl=https://raw.githubusercontent.com/tcler/kiss-vm-ns/master
fi

[[ -f $dbfile ]] && {
	echo "{VM:INFO} load distro-db file $dbfile ..."
	source $dbfile
}
[[ -f $owndbfile ]] && {
	echo "{VM:INFO} load own distro-db file $owndbfile ..."
	source $owndbfile
}

for disk in "${EXTRA_DISKS[@]}"; do
	read size fstype _ <<<"${disk//,/ }"
done

#thanks: https://stackoverflow.com/questions/49733211/bash-jump-to-bottom-of-terminal
# { echo -ne "\E[${LINES};0H"; }  works the same as { tput cup $(tput lines) 0; }
distroSelectNull() { tput cup $(tput lines) 0; echo -e "\n{VM:WARN} ^^^ you didn't select any distro/family, it is necessary!"; }
# Phase-0 get distro name
[[ -z "$Distro" ]] && Distro=$1
[[ -z "$Distro" ]] && {
	if [[ -z "$Location" && -z "$Imageurl" && -z "$Isourl" ]]; then
		distropatternInter=$RuntimeTmp/distroPatternInternet
		distropatternIntra=$RuntimeTmp/distroPatternIntranet
		distrolist=$RuntimeTmp/distroList
		dialogres=$RuntimeTmp/dialogRes
		touch $distropatternInter $distropatternIntra

		echo -e "Rocky\nCentOS\nfedora\ndebian\nopenSUSE\narchlinux\nFreeBSD\nWindows" >>$distropatternInter
		for dname in "${!distroInfo[@]}"; do echo "$dname"; done | sort -rV >>$distrolist

		dialogTitle="vm-create"
		[[ "$Intranet" = yes ]] && {
			echo -e "Fedora\nRHEL-9\nRHEL-8\nRHEL-7\nRHEL-6\nRHEL5" >>$distropatternIntra
			fetch_distro_list >>$distrolist
			dialogTitle+=" Intranet"
		}

		familys=$(sed -e 's/.*/"&" "" 1/' $distropatternIntra $distropatternInter)
		dialog --backtitle "$dialogTitle" --radiolist "please selet distro family/pattern:" 22 40 20 $familys 2>$dialogres || { distroSelectNull; exit 0; }
		pattern=$(head -n1 $dialogres|sed 's/"//g')
		dList=$(sed -e '/ /d' -e 's/.*/"&" "" 1/' $distrolist|egrep "$pattern")
		[[ "$Intranet" = yes ]] && grep -F "$pattern" $distropatternIntra && {
			dialog --title "If include nightly build" \
				--backtitle "Do you want nightly build distros?" \
				--yesno "Do you want nightly build distros?" 7 60
			[[ $? = 1 ]] && dList=$(echo "$dList"|grep -v '\.n\.[0-9]"')
		}
		dialog --backtitle "$dialogTitle" --radiolist "please select distro:" 30 60 28 $dList 2>$dialogres || { distroSelectNull; exit 0; }
		Distro=$(head -n1 $dialogres|sed 's/"//g')
		[[ -z "$Distro" ]] && { distroSelectNull; exit 0; }
		tput cup $(tput lines) 0
	else
		Usage
		echo -e "\n{VM:WARN} ^^^ a distro name is necessary!\n"
		exit 1
	fi
}
[[ -z "$Distro" ]] && {
	echo -e "{VM:WARN} you have to select a distro name or specified it by adding command line parameter:\n"
	Usage
	exit 1
}
if egrep --color=always "[][~\!@#$^&()=,\":;{}|<>'\` ]" <<<"$Distro"; then
	echo -e "{VM:WARN} ^^^ invalid character[s] in distro name: '$Distro'"
	exit 1
fi

[[ "${*,,} ${Distro,,}" =~ windows ]] && {
	WIN_AUTO=yes
	DEFAULT_DISK_BUS=sata
	WIN_TEMPLATE=${WIN_TEMPLATE:-base}
	WIN_IF_MODEL=${WIN_IF_MODEL:-e1000}
}
[[ "$NOAUTO" = yes ]] && { WIN_AUTO=no; }
if [[ "$VM_OS_VARIANT" = win11 || "${*,,}" =~ (win|windows-?)11 ]]; then
	UEFI_TPM_SB=yes
fi
if [[ "$UEFI_TPM_SB" = yes ]]; then
	BOOT_OPTS+=(--boot=firmware=efi,loader_secure=yes)
	VTPM=yes
	MACHINE_OPT="--machine=q35"
	VNCWAIT_AFTER_INSTALL+=("boot.manager,key:enter key:down key:down key:enter key:enter key:enter")
fi

case "${BOOT_OPTS[*]}" in
	(*uefi*|*firmware=efi*) VNCWAIT_AFTER_INSTALL+=("boot.manager,key:enter key:down key:down key:enter key:enter key:enter");;
esac

if [[ -n "$BOOT_DISK_ATTRS" ]]; then
	[[ "$BOOT_DISK_ATTRS" =~ bus= ]] || BOOT_DISK_ATTRS+=,bus=$DEFAULT_DISK_BUS
else
	BOOT_DISK_ATTRS=bus=$DEFAULT_DISK_BUS
fi

if [[ "$VTPM" = yes ]]; then
	_dependpkgs=swtpm-tools
	_dependcmd=swtpm_setup
	if ! grep -q tpm-crb < <($QEMU_KVM -device help); then
		echo -e "{VM:WARN} $(qemu_kvm_nvr) don't support tpm-crb driver that's required by --vtpm option"
		exit 1
	fi
	if ! command -v $_dependcmd &>/dev/null; then
		echo -e "{VM:WARN} pkg $_dependpkgs is/are needed by vTPM function, please install $_dependpkgs first."
		exit 1
	fi
	VTPM_OPT="--tpm emulator,model=tpm-crb,version=2.0"
	PKGS+=" tpm2-tools"
fi

[[ -n "$QEMU_KVM" ]] && {
	DISPLAY= timeout 0.1 $QEMU_KVM -vga qxl |& grep -q 'QXL VGA not available' && {
		[[ -z "$SPECIFIED_VIDEO" ]] && VIDEO_OPT="--video=virtio"
	}
	$QEMU_KVM -machine help|grep -q q35 && Q35=support
}
[[ "$MACHINE_OPT" = *q35* && "$Q35" != support ]] && {
	echo -e "{VM:ERROR} Guest require machine type 'q35', but the qemu in your platform doesn't support 'q35'" >&2
	exit 1
}

[[ "$Distro" = *[%*?]* ]] && {
	dpattern=${Distro//./\\.}
	dpattern=${dpattern//\?/.}
	dpattern=${dpattern//[%*]/.*}
	#_distro=$(fetch_distro_list | grep -i "^${dpattern}$" | head -1)
	_distro=$(fetch_distro_list | grep -i "^${dpattern}$" | head -2 | tail -1)
	[[ -n "$_distro" ]] && Distro="$_distro"
}

[[ "$OnlyGetVMName" = yes ]] && {
	vmname_gen $Distro $VMName
	exit $?
}

[[ -z "$OnlyGetUrl" ]] && {
	# check if VM exist
	vmname=$(vmname_gen $Distro $VMName)
	virsh desc $vmname &>/dev/null && {
		if [[ "${OVERWRITE}" = "yes" ]]; then
			echo "{VM:INFO} VM $vmname has been there, remove it ..."
			_vmdelete $vmname || {
				echo "{VM:ERR} delete $vmname fail, exit."
				exit 2
			}
		elif [[ "${DOWNLOAD_ONLY}" != "yes" ]]; then
			echo "{VM:INFO} VM $vmname has been there, if you want overwrite please use --force option"
			exit
		fi
	}
	vmhostname=$vmname
	[[ "$GenerateImage" = yes ]] && vmhostname=${vmname#${VMUSER}-}

	VMpath=$VMSHOME/$Distro/$vmname
	[[ "$InstallType" = pxe ]] && VMpath=$VMSHOME/PXE/$vmname
	run -as=$VMUSER mkdir -p $VMpath
	setfacl -mu:${QEMU_USER}:rwx -mg:${QEMU_USER}:rwx -R $VMSHOME 2>/dev/null
	if [[ "$VMSHARE" != yes ]]; then
		setfacl -d -mg::--- -mo::--- $VMpath
	fi
}
if [[ "$VM_OS_VARIANT" = win* || "${VMpath,,}" =~ (win|windows(-server)?)-?[0-9] ]]; then
	_MSIZE=4096
	[[ "$dsizeflag" -ne 1 ]] && DSIZE=80

	#add virtio-win iso
	if [[ "${EXTRA_CDROMS[*]}" != *virtio-win*.iso* ]]; then
		VirtioDriverISOUrl=/usr/share/virtio-win/virtio-win.iso
		if [[ -f "$VirtioDriverISOUrl" ]]; then
			#q35 support multi-cdrom
			#if not q35, extra cdrom will cause err: "boot failed : could not read from CDROM(code 0004)"
			#`-> see also: https://marc.info/?l=centos&m=151039100602440&w=2
			if [[ "$Q35" = support ]] && [[ -z "$MACHINE_OPT" || "$MACHINE_OPT" = *q35* ]]; then
				EXTRA_CDROMS+=("$VirtioDriverISOUrl")
			elif [[ -z "$WIN_VirtioDrv_OPT" ]]; then
				WIN_VirtioDrv_OPT="--virtio-win=$VirtioDriverISOUrl"
			fi
		fi
	fi
fi

# Phase-1: get distro's Location or Image url
_Imagepattern='(qcow2c|qcow2|qcow2.xz|raw|raw.xz|img)'
[[ -n "${distroInfo[$Distro]}" ]] && {
	echo -e "{VM:INFO} db: ${distroInfo[$Distro]}"
	read _Imageurl _Location <<<"${distroInfo[$Distro]}"
	[[ "$_Imageurl" = *%%* ]] && {
		read _Imageurl _Imagepattern <<<"${_Imageurl/\%\%/ }"
	}
	if [[ "$_Imageurl" = cdrom:* ]]; then
		InstallType=cdrom
		Isourl=${Isourl:-${_Imageurl#cdrom:}}
		Imageurl=
	else
		echo -e "{VM:INFO} db: $_Imageurl($_Imagepattern) $_Location"

		[[ -z "$Imageurl" ]] && Imageurl=${_Imageurl}
		[[ -z "$Location" ]] && Location=${_Location}
	fi
}

if [[ "$InstallType" = import ]]; then
	if [[ -n "$Imageurl" ]]; then
		if [[ ! -f $Imageurl ]]; then
			if ! is_available_url $Imageurl; then
				echo "{VM:WARN} '$Imageurl' is neither an image file nor an available url, exit .." >&2
				exit 2
			else
				: #do nothing
			fi
		fi

		if [[ $Intranet = yes ]]; then
			if [[ $Distro = RHEL-* || $Distro = Fedora-* ]]; then
				Location=$(distro2location $Distro 2>/dev/null)
			fi
		fi
	else
		if [[ $Intranet != yes ]]; then
			echo "{VM:WARN} can not find imageUrl of '$Distro' in database." >&2
			exit 1
		else
			echo "{VM:INFO} getting fastest location of $Distro ..." >&2
			Location=$(distro2location $Distro)
			[[ -z "$Location" ]] && {
				echo "{VM:WARN} can not find location info of '$Distro'" >&2
				exit 1
			}
			echo -e " -> $Location"
			echo "{VM:INFO} getting image url according location url ^^^ ..." >&2
			imageLocation=${Location/\/os\//\/images\/}
			[[ $Distro = Fedora-* ]] &&
				imageLocation=$(echo "$imageLocation" | sed -r 's;/[Ss]erver|Everything/;/Cloud/;')
			is_available_url $imageLocation ||
				imageLocation=${imageLocation/Cloud/CloudImages}
			read Imageurl _ < <(getimageurls $imageLocation "${_Imagepattern}"|sort -Vr)
			if [[ $? != 0 ]]; then
				echo "{VM:INFO} can not find imageUrl of '${Distro}:${GuestARCH}' in database, switching to Location mode" >&2
				InstallType=location
				Imageurl=
			fi
		fi
	fi

	# if not swithed to Location mode
	if [[ "$InstallType" = import ]]; then
		if [[ ! -f "$Imageurl" ]]; then
			if ! egrep -q '\.(qcow2c|qcow2|qcow2.xz|raw|raw.xz|img)$' <<<"$Imageurl"; then
				ImageurlOrig=$Imageurl
				read Imageurl _ < <(getimageurls ${Imageurl} "${_Imagepattern}"|sort -Vr)
			fi
		fi

		if [[ -n "$Imageurl" ]]; then
			if [[ -n "$OnlyGetUrl" ]]; then
				echo -e "image url: $Imageurl"
			else
				echo -e "image url: \e[4m$Imageurl\e[0m"
			fi
		else
			echo "{VM:WARN} not found '$GuestARCH' image from '${ImageurlOrig}' by pattern(${_Imagepattern})" >&2
			exit 1
		fi
	fi
fi

if [[ "$InstallType" = location ]]; then
	_MSIZE=2048

	if [[ $Intranet = yes && -z "$Location" ]]; then
		echo "{VM:INFO} getting fastest location of $Distro ..." >&2
		Location=$(distro2location $Distro)
	fi

	if [[ -n "$Location" ]]; then
		if [[ -n "$OnlyGetUrl" ]]; then
			echo -e "location url: $Location"
		else
			echo -e "location url: \e[4m$Location\e[0m"
		fi
	else
		echo "{VM:WARN} can not find distro location. please check if '$Distro' is valid distro" >&2
		exit 1
	fi
fi

[[ -n "$OnlyGetUrl" ]] && { exit; }


if [[ "$InstallType" = pxe ]]; then
	_MSIZE=2048
fi

available_msize=$(free -m | awk '/^Mem:/{print $NF}')
[[ "$_MSIZE" -gt "$available_msize" ]] && _MSIZE=$((available_msize-8))

MSIZE=${MSIZE:-$_MSIZE}
[[ "$MSIZE" = *[Gg] ]] && MSIZE=$((${MSIZE%[Gg]} * 1024))

[[ "$MSIZE" -gt "$available_msize" ]] && {
	echo "{VM:ERR} the available mem size is less than your required."
	exit 132
}

echo "{VM:INFO} guess/verify os-variant ..."
if [[ -z "$VM_OS_VARIANT" ]]; then
	VM_OS_VARIANT=${Distro/-/}
	VM_OS_VARIANT=${VM_OS_VARIANT%%-*}
	VM_OS_VARIANT=${VM_OS_VARIANT,,}

	osvariants=$(virt-install --os-variant list 2>/dev/null) ||
		osvariants=$(osinfo-query os 2>/dev/null)
	[[ -n "$osvariants" ]] && {
		grep -q "^ $VM_OS_VARIANT " <<<"$osvariants" || VM_OS_VARIANT=${VM_OS_VARIANT/.*/-unknown}
		grep -q "^ $VM_OS_VARIANT " <<<"$osvariants" || VM_OS_VARIANT=${VM_OS_VARIANT/[0-9]*/-unknown}
		if grep -q "^ $VM_OS_VARIANT " <<<"$osvariants"; then
			OS_VARIANT_OPT=--os-variant=$VM_OS_VARIANT
		fi
	}
	[[ -z "$OS_VARIANT_OPT" ]] && {
		man virt-install|grep -q detect=on && OS_VARIANT_OPT=--os-variant=detect=on,require=off
	}
else
	OS_VARIANT_OPT=--os-variant=$VM_OS_VARIANT
fi

# Phase-2: start create VM
# prepare ssh pub key
[[ -f ~/.ssh/id_rsa && -f ~/.ssh/id_rsa.pub ]] || {
	echo -e 'y\n' | ssh-keygen -q -t rsa -f ~/.ssh/id_rsa -N ''
}
[[ -f ~/.ssh/id_ecdsa && -f ~/.ssh/id_ecdsa.pub ]] || {
	echo -e 'y\n' | ssh-keygen -q -t ecdsa -f ~/.ssh/id_ecdsa -N ''
}
# prepare network option
[[ -z "$NETWORK_OPTS" ]] && {
	srcif=$(get_default_if)
	if [[ "$InstallType" = pxe ]]; then
		NETWORK_OPTS="--network=type=direct,source=$srcif,source_mode=$MacvtapMode,model=${DEFAULT_IF_MODEL}"
	elif [[ "$WIN_AUTO" = yes ]]; then
		gen_virt_mac() { echo -n 54:52:00$(od -txC -An -N3 /dev/random | tr \  :); }
		WIN_MAC_INT=$(gen_virt_mac); WIN_MAC_EXT=$(gen_virt_mac)
		if [[ "$CUSTOM_WIN_IF_MODEL" = yes ]]; then
			intIfModel=${WIN_IF_MODEL}
		else
			case "$WIN_TEMPLATE" in (base) WIN_IF_MODEL=virtio;; esac
			intIfModel=e1000
		fi
		NETWORK_OPTS="--network=network=default,mac=$WIN_MAC_INT,model=${intIfModel} --network=type=direct,source=$srcif,source_mode=$MacvtapMode,mac=$WIN_MAC_EXT,model=${WIN_IF_MODEL}"
	else
		NETWORK_OPTS="--network=network=default,model=${DEFAULT_IF_MODEL} --network=type=direct,source=$srcif,source_mode=$MacvtapMode,model=${DEFAULT_IF_MODEL}"
	fi
}

### hostdev option
HOST_DEV_OPTS=()
for dev in "${HOST_DEV_LIST[@]}"; do
	HOST_DEV_OPTS+=("--hostdev=$dev")
done
for nic in "${HOST_NIC_LIST[@]}"; do
	pcislot=$(nic2pcislot $nic)
	if [[ -n "$pcislot" ]]; then
		HOST_DEV_OPTS+=("--hostdev=$pcislot")
	else
		echo -e "{VM:WARN} host nic '$nic' is not a pci device" >&2
	fi
done

### xdisk option
k=0
for disk in "${EXTRA_DISKS[@]}"; do
	read size fstype _args <<<"${disk//,/ }"
	size=${size%[gG]}
	[[ $fstype = *=* ]] && { _args=$fstype; fstype=; }

	_format=qcow2
	_ximage=xdisk$((k++))
	if [[ -z "$fstype" ]]; then
		ximage=$_ximage.$_format
		qemu-img create -f qcow2 $VMpath/${ximage} ${size}G
	else
		_format=raw
		ximage=$_ximage.$_format
		_rootdir=$(mktemp -d)
		virt-make-fs -v --partition --label=$_ximage \
			-s ${size}G -t $fstype $_rootdir $VMpath/${ximage}
		rmdir $_rootdir
	fi
	[[ -z "$_args" ]] && _args=bus=${DEFAULT_DISK_BUS}
	DISK_OPTS+=" --disk path=$VMpath/${ximage},format=$_format,${_args}"  #bus=scsi
done

### disk option
for disk in "${DISKS[@]}"; do
	read img _args <<<"${disk/,/ }"
	if [[ ! -f "$img" ]]; then
		echo -e "\n{VM:WARN} '--disk $disk': file '$img' does not exist, ignore it.\n"
		continue
	fi
	cp -f $img $VMpath/.

	[[ -z "$_args" ]] && _args=bus=${DEFAULT_DISK_BUS}
	[[ "$_args" != *format=* ]] && {
		_fmt=$(qemu-img info $img|awk '/file.format:/{print $NF}')
		[[ -n "$_fmt" ]] && _fmt=",format=$_fmt"
	}
	DISK_OPTS+=" --disk path=$VMpath/$img,${_args}${_fmt}"
done

### xcdrom option
[[ ${#EXTRA_CDROMS[@]} > 0 && -z "$MACHINE_OPT" ]] && {
	#Q35 support multi-cdrom
	[[ "$Q35" = support ]] && MACHINE_OPT="--machine=q35"
}
for _iso in "${EXTRA_CDROMS[@]}"; do
	isopath=$VMpath/${_iso##*/}
	cp -v $_iso $isopath
	#fixme: ^^ performance improve?
	chcon system_u:object_r:qemu_var_run_t:s0 $isopath #system_u:object_r:virt_cache_t:s0 also works
	ls -lhZ $isopath
	DISK_OPTS+=" --disk $isopath,device=cdrom,${iso_bus_type:-bus=sata}"
done

### nvme option
c=1
for devinfo in "${NVME_DEVS[@]}"; do
	for attr in ${devinfo//,/ }; do
		case $attr in
		size=*) fsize=${attr#size=};;
		format=*) format=${attr#format=};;
		esac
	done
	format=${format:-qcow2}
	devfile=nvme$c.$format
	qemu-img create -f $format $VMpath/$devfile ${fsize}G
	setfacl -mu:${QEMU_USER}:rwx -mg:${QEMU_USER}:rwx $VMpath/$devfile
	chcon system_u:object_r:qemu_var_run_t:s0 $VMpath/$devfile #system_u:object_r:virt_cache_t:s0 also works
	getfacl $VMpath/$devfile
	ls -lZ $VMpath/$devfile
	QEMU_OPTS+=("--qemu-commandline=-drive file=$VMpath/$devfile,format=$format,if=none,id=NVME$c -device nvme,drive=NVME$c,serial=nvme-$c")
	let c++
done
virt-install -h | grep -q -- --qemu-commandline || QEMU_OPTS=()

### nvdimm option
CONTROLLER_OPTS=
if [[ "${#NVDIMM_LIST[@]}" -gt 0 ]]; then
	CONTROLLER_OPTS="--controller=type=pci,index=9,model=pcie-root-port --controller=type=pci,index=10,model=pcie-root-port"

	hpmemMax=$((1024*512))   #units Mi
	memSlots=4
	MEM_OPTS="--memory=${MSIZE},hotplugmemorymax=$hpmemMax,hotplugmemoryslots=$memSlots --cpu cell0.cpus=0-$((VCPUN-1)),cell0.memory=$((MSIZE*1024))"

	nvdimmdevs=("${NVDIMM_LIST[@]}")
	for ((i=0; i<${#nvdimmdevs[@]}; i++)); do
		[[ $i -ge $memSlots ]] && break
		nvdimmfile=$VMpath/nvdimm-$i.dev
		read targetSize labelSize _ <<<"${nvdimmdevs[$i]//+/ }"
		targetSize=${targetSize:-511}
		labelSize=${labelSize:-1}
		totalSize=$((targetSize+labelSize))
		truncate -s ${totalSize}M $nvdimmfile
		MEM_OPTS+=" --memdev nvdimm,source_path=$nvdimmfile,target_size=${targetSize},target_node=0,target_label_size=${labelSize}"
	done
fi

### sharedir(virtio) option
if [[ ${#SHARE_DIRS[@]} -gt 0 ]]; then
	INTERACT=no
	MEM_OPTS+=" --memorybacking=access.mode=shared"

	hpmemMax=$((1024*512))   #units Mi
	memSlots=4
	MEM_OPTS+=" --memory=${MSIZE},hotplugmemorymax=$hpmemMax,hotplugmemoryslots=$memSlots --cpu cell0.cpus=0-$((VCPUN-1)),cell0.memory=$((MSIZE*1024))"

	#ref: https://libvirt.org/kbase/virtiofs.html#id3
	#- The host-side virtiofsd daemon, like other vhost-user backed devices,
	#- requires shared memory between the host and the guest.
	virsh allocpages 2M $((MSIZE/2))
	#or add memory_backing_dir = "/dev/shm/" in /etc/libvirt/qemu.conf
fi

MEM_OPTS=${MEM_OPTS:---memory=${MSIZE}}

case ${Distro,,} in
rhel-5*|rhel5*|centos5*|centos-5*)
	EPEL=http://archive.fedoraproject.org/pub/archive/epel/epel-release-latest-5.noarch.rpm;;
rhel-6*|rhel6*|centos6*|centos-6*)
	EPEL=http://dl.fedoraproject.org/pub/epel/epel-release-latest-6.noarch.rpm;;
rhel-7*|rhel7*|centos7*|centos-7*)
	EPEL=http://dl.fedoraproject.org/pub/epel/epel-release-latest-7.noarch.rpm;;
rhel-8*|rhel8*|centos-8*|centos8*|rocky-8*|rocky8*)
	EPEL=http://dl.fedoraproject.org/pub/epel/epel-release-latest-8.noarch.rpm;;
rhel-9*|rhel9*|rocky-9*|rocky9*)
	EPEL=http://dl.fedoraproject.org/pub/epel/epel-release-latest-9.noarch.rpm;;
esac
[[ -n "$EPEL" ]] && PKGS="$EPEL $PKGS"

if [[ "$InstallType" = location ]]; then
	[[ -z "$KSPath" ]] && {
		echo "{VM:INFO} generating kickstart file for $Distro ..."
		ksauto=$VMpath/ks-$VM_OS_VARIANT-$$.cfg
		postscript=$VMpath/postscript.ks
		KSPath=$ksauto
		REPO_OPTS=$(distro2repos $Distro $Location | sed 's/^/--repo /')

		cat <<-END >>$postscript
		test -f /etc/yum.repo.d/cdn_os.repo && sed -i 's/enabled = 1/enabled = 0/' /etc/yum.repo.d/cdn_os.repo
		test -f /etc/dnf/dnf.conf && { test -f /usr/bin/yum || ln -s /usr/bin/{dnf,yum}; }

		echo "[\$USER@\${HOSTNAME} \${HOME} \$(pwd)] configure hostname ..."
		test -f /etc/hostname && echo ${vmhostname} >/etc/hostname || echo HOSTNAME=${vmhostname} >>/etc/sysconfig/network

		echo "[\$USER@\${HOSTNAME} \${HOME} \$(pwd)] yum install pkgs ${PKGS} ..."
		yum install -y wget ${PKGS} 2>/dev/null

		END
		[[ $Intranet = yes ]] && cat <<-END >>$postscript
		echo "[\$USER@\${HOSTNAME} \${HOME} \$(pwd)] brew install $BPKGS ..."
		wget -O /usr/bin/brewinstall.sh -N -q $bkrClientImprovedUrl/utils/brewinstall.sh --no-check-certificate
		chmod +x /usr/bin/brewinstall.sh
		brewinstall.sh $(for b in $BPKGS; do echo -n "'$b' "; done) -noreboot

		END
		[[ $Intranet = yes && "$RESTRAINT" = yes ]] && cat <<-END >>$postscript
		echo "[\$USER@\${HOSTNAME} \${HOME} \$(pwd)] systemctl start restraintd ..."
		yum install -y restraint-rhts  beakerlib && systemctl start restraintd

		END

		[[ "$fips" = yes ]] && cat <<-END >>$postscript
		echo "[\$USER@\${HOSTNAME} \${HOME} \$(pwd)] enable fips ..."
		wget -O /usr/bin/enable-fips.sh -N -q $baseUrl/utils/enable-fips.sh --no-check-certificate
		chmod +x /usr/bin/enable-fips.sh
		enable-fips.sh

		END
		[[ "$kdump" = yes ]] && cat <<-END >>$postscript
		echo "[\$USER@\${HOSTNAME} \${HOME} \$(pwd)] kdump-setup ..."
		wget -O /usr/bin/kdump-setup.sh -N -q $baseUrl/utils/kdump-setup.sh --no-check-certificate
		chmod +x /usr/bin/kdump-setup.sh
		kdump-setup.sh
		END
		[[ "$GenerateImage" = yes ]] && {
			cat <<-END >>$postscript
			test -f /etc/yum.repo.d/cdn_os.repo && sed -i 's/enabled = 0/enabled = 1/' /etc/yum.repo.d/cdn_os.repo
			echo "[\$USER@\${HOSTNAME} \${HOME} \$(pwd)] install cloud-init ..."
			yum install -y cloud-init
			test -f /etc/yum.repo.d/cdn_os.repo && sed -i 's/enabled = 1/enabled = 0/' /etc/yum.repo.d/cdn_os.repo
			END
		}
		if [[ ! -f $Location ]]; then
			URL_OPT="-url $Location"
		fi
		if [[ "$NO_SSHKEY" = yes ]]; then
			ks-generator.sh -d $Distro $URL_OPT $REPO_OPTS $_REPO_OPTS --post $postscript >$KSPath
		else
			ks-generator.sh -d $Distro $URL_OPT $REPO_OPTS $_REPO_OPTS --post $postscript --sshkeyf ~/.ssh/id_rsa.pub --sshkeyf ~/.ssh/id_ecdsa.pub >$KSPath
		fi
	}

	echo -e "{VM:INFO} creating VM by using location:\n ->  $Location"
	run -as=$VMUSER touch $VMpath/.kiss-vm
	run -as=$VMUSER bash -c "echo $Location >$VMpath/url"
	if [[ -f $Location ]]; then
		cp $Location $VMpath/. && Location=$VMpath/${Location##*/}
	fi

	[[ "$GenerateImage" = yes ]] && {
		sed -i '/^reboot$/s//poweroff/' ${KSPath}
		NOREBOOT=--noreboot
	}
	ksfile=${KSPath##*/}

	imagefile=$VMpath/${vmname}.qcow2
	qemu-img create -f qcow2 ${imagefile} ${DSIZE}G

	[[ "$DEBUG" = yes ]] && {
		echo "#[debug] kickstart:"
		cat ${KSPath}
	}

	ls -l ${imagefile}

	BOOT_DISK_OPT=
	if [[ -z "$NVME_BOOT" ]]; then
		BOOT_DISK_OPT="--disk path=${imagefile},${BOOT_DISK_ATTRS}"
	else
		BOOT_DISK_OPT="--disk none"
		setfacl -mu:${QEMU_USER}:rwx -mg:${QEMU_USER}:rwx $imagefile
		chcon system_u:object_r:qemu_var_run_t:s0 $imagefile #system_u:object_r:virt_cache_t:s0 also works
		QEMU_OPTS+=("--qemu-commandline=-drive file=$imagefile,format=qcow2,if=none,id=NVME0 -device nvme,drive=NVME0,serial=nvme-0,bootindex=-1")
	fi

	#workaround: see Bug 1707389 #c15
	workaroundExtraArgs="rd.driver.pre=loop"
	run -debug -nohup unbuffer virt-install --connect=qemu:///system $virtualizationOption --accelerate $XML "${QEMU_OPTS[@]}" "${QEMU_ENV[@]}" \
	  "${VIRT_INSTALL_OPTS[@]}" \
	  $OS_VARIANT_OPT \
	  --name $vmname \
	  --location $Location \
	  $BOOT_DISK_OPT \
	  $MACHINE_OPT \
	  "${BOOT_OPTS[@]}" \
	  --vcpus ${VCPUS} \
	  ${ARCH_OPT} \
	  $MEM_OPTS \
	  $DISK_OPTS \
	  $NETWORK_OPTS \
	  $CONTROLLER_OPTS \
	  "${HOST_DEV_OPTS[@]}" \
	  --initrd-inject $KSPath \
	  --extra-args="inst.ks=file:/$ksfile console=tty0 console=ttyS0,${baudrate}n8 $workaroundExtraArgs" \
	  $VTPM_OPT \
	  ${VIDEO_OPT} \
	  ${SOUND_OPT} \
	  $NOREBOOT \
	  --noautoconsole \
	  ${GRAPHICS_OPT}

	[[ -z "$XML" ]] && while true; do test -s $VMpath/nohup.log && break; done
	expect -c "spawn tail -f $VMpath/nohup.log
		set timeout $VirtInstallTimeOut
		expect {
			{* to complete the installation process.} { exit }
			{*\r} { exp_continue }
			{</domain>} { exit }
		}
	"
	[[ -n "$XML" ]] && {
		#cp $VMpath/nohup.log $VMpath/vm.xml
		sed -n '/^<domain/ {:L /\n<.domain>/! {N; b L}; p; q}' $VMpath/nohup.log >$VMpath/vm.xml
		virsh domxml-to-native qemu-argv $VMpath/vm.xml | tee $VMpath/qemu-argv
		rm -f $VMpath/*
		exit
	}

	if [[ "$NOAUTO" = yes ]]; then
		expect -c '
			set timeout 10
			spawn virsh console '"$vmname"'
			expect {
				timeout {
					send_user "\n\n{VM:INFO} exiting from console...\n"
					exit 0
				}
				exp_continue
			}
		'
	else
		trap - SIGINT
		for ((i=0; i<31; i++)); do
			#clear -x
			tput cup $(tput lines) 0
			INTERACT=$INTERACT LANG=C expect -c '
				set intc 0
				set timeout -1
				spawn virsh console '"$vmname"'
				trap {
					send_user "You pressed Ctrl+C [incr intc]/8\n"
					if {$intc >= 8} {
						interact; exit
					}
				} SIGINT
				expect {
					"error: Disconnected from qemu:///system due to end of file*" {
						send "\r"
						puts $expect_out(buffer)
						exit 5
					}
					"error: failed to get domain" {
						send "\r"
						puts $expect_out(buffer)
						exit 6
					}
					"error: internal error: character device console0 is not using a PTY" {
						send "\r"
						puts $expect_out(buffer)
						exit 1
					}
					"Unsupported Hardware Detected" {
						send "\r"
						exp_continue
					}
					"Which would you like to install through" {
						# see: [RHEL 6.1] Anaconda requires user interaction in case of kickstart network activation failing
						send "\r"
						interact; exit
					}

					"reboot: Power down" { exit 0 }
					"Power down" { exit 0 }

					"reboot: Restarting system" { send "\r"; exit 1 }
					"Restarting system" { send "\r"; exit 1 }

					"error: The domain is not running" { send "\r"; exit 127 }

					"reboot: System halted" { send_user "\r\rsomething is wrong! cancel installation ..\r\r"; exit 255 }
					"System halted" { send_user "\r\rsomething is wrong! cancel installation ..\r\r"; exit 255 }

					"An unknown error has occurred" { exit 255 }
					"error: Domain not found:" { exit 255 }

					"* login:" { send "root\r" }
				}
				expect "Password:" {
					send "'"$defaultPasswd"'\r"
					send "\r\r\r\r\r\r"
					send "# your are in console, Ctr + ] to exit \r"
					send "\r\r\r\r\r\r"
				}

				if {$env(INTERACT) == "no"} { exit 0 }
				interact; exit
			'
			ReturnCode=$?
			[[ $ReturnCode = 0 || $ReturnCode = 255 ]] && break
			[[ $ReturnCode = 127 ]] && { virsh start $vmname 2>&1 | sed 's/error: //'; continue; }
			sleep 2
		done
		echo -e "\n{VM:INFO} Quit from expect -c 'spawn virsh console $vmname'"

		[[ $ReturnCode = 255 ]] && {
			echo -e "\n{VM:INFO} something is wrong(please check screen log), will clean all tmp files ..."
			RM=yes
			GenerateImage=
		}
	fi

elif [[ "$InstallType" = import ]]; then
	[[ -f $Imageurl ]] && Imageurl=file://$(readlink -f ${Imageurl})
	imagefilename=${Imageurl##*/}
	imagefile=$VMpath/$imagefilename

	echo "{VM:INFO} downloading cloud image file of $Distro to $imagefile ..."
	if [[ $Imageurl != file:///* ]]; then
		if [[ -n "$SAVE_IMAGE" ]]; then
			curl_download_x ${DownloadImagePath}/${imagefilename} $Imageurl
			[[ "$DOWNLOAD_ONLY" = yes ]] && {
				ls -l ${DownloadImagePath}/${imagefilename}
				exit 0
			}
			cp ${DownloadImagePath}/${imagefilename} $imagefile
		else
			curl_download_x $imagefile $Imageurl
		fi
	else
		cp -f ${Imageurl#file://} $imagefile
	fi
	[[ -f ${imagefile} ]] || exit 1

	[[ $imagefile = *.xz ]] && {
		echo "{VM:INFO} decompress $imagefile ..."
		xz -d $imagefile
		rm -f $imagefile
		imagefile=${imagefile%.xz}
		[[ -f ${imagefile} ]] || exit 1
	}

	[[ "$NO_CLOUD_INIT" != yes ]] && {
		echo -e "{VM:INFO} creating cloud-init iso"
		cloudinitiso=$VMpath/$vmname-cloud-init.iso
		iso_bus_type=
		[[ "${Distro,,}" = debian* ]] && iso_bus_type=,bus=scsi

		[[ "$fips" = yes ]] && FIPS_OPT=--fips
		[[ "$kdump" = yes ]] && KDUMP_OPT=--kdump
		[[ $Intranet = yes && -n "$Location" ]] && {
			REPO_OPTS=$(distro2repos $Distro $Location | sed -e '/cdn_os:/d' -e 's/^/--repo /')
		}
		[[ "$DEBUG" = yes ]] && DEBUG_OPT=--debug
		if [[ "$NO_SSHKEY" = yes ]]; then
			cloud-init-iso-gen.sh $cloudinitiso -hostname ${vmhostname} -b "$BPKGS" -p "$PKGS" $DEBUG_OPT $REPO_OPTS \
				 $_REPO_OPTS $FIPS_OPT $KDUMP_OPT
		else
			cloud-init-iso-gen.sh $cloudinitiso -hostname ${vmhostname} -b "$BPKGS" -p "$PKGS" $DEBUG_OPT $REPO_OPTS \
				 $_REPO_OPTS $FIPS_OPT $KDUMP_OPT --sshkeyf ~/.ssh/id_rsa.pub --sshkeyf ~/.ssh/id_ecdsa.pub
		fi
		CLOUD_INIT_OPT="--disk $cloudinitiso,device=cdrom$iso_bus_type"
	}

	echo -e "{VM:INFO} creating VM by import $imagefile"
	run -as=$VMUSER bash -c "touch $VMpath/.kiss-vm"
	run -as=$VMUSER bash -c "echo $Imageurl >$VMpath/url"

	[[ "$dsizeflag" = 1 || "$NOAUTO" != yes ]] && {
		_size=$(qemu-img info ${imagefile}|sed -rn '/^virtual size:.*\(([0-9]+).*$/{s//\1/;p}')
		[[ "$_size" -lt $((DSIZE*1024*1024*1024)) ]] && {
			echo -e "{VM:INFO} resize $imagefile to ${DSIZE}G"
			[[ "${imagefile}" = *.raw ]] && fmtOpt="-f raw"
			qemu-img resize $fmtOpt ${imagefile} ${DSIZE}G
		}
	}

	ls -l ${imagefile}

	BOOT_DISK_OPT=
	if [[ -z "$NVME_BOOT" ]]; then
		BOOT_DISK_OPT="--disk path=${imagefile},${BOOT_DISK_ATTRS}"
	else
		setfacl -mu:${QEMU_USER}:rwx -mg:${QEMU_USER}:rwx $imagefile
		chcon system_u:object_r:qemu_var_run_t:s0 $imagefile #system_u:object_r:virt_cache_t:s0 also works
		QEMU_OPTS+=("--qemu-commandline=-drive file=$imagefile,format=qcow2,if=none,id=NVME0 -device nvme,drive=NVME0,serial=nvme-0,bootindex=0")
	fi

	run -debug -nohup unbuffer virt-install --connect=qemu:///system $virtualizationOption --accelerate $XML "${QEMU_OPTS[@]}" "${QEMU_ENV[@]}" \
	  "${VIRT_INSTALL_OPTS[@]}" \
	  $OS_VARIANT_OPT \
	  --name $vmname \
	  --import \
	  $BOOT_DISK_OPT \
	  $MACHINE_OPT \
	  "${BOOT_OPTS[@]}" \
	  --vcpus ${VCPUS} \
	  ${ARCH_OPT} \
	  $MEM_OPTS \
	  $DISK_OPTS \
	  $CLOUD_INIT_OPT \
	  $NETWORK_OPTS \
	  $CONTROLLER_OPTS \
	  "${HOST_DEV_OPTS[@]}" \
	  $VTPM_OPT \
	  ${VIDEO_OPT} \
	  ${SOUND_OPT} \
	  --noautoconsole \
	  ${GRAPHICS_OPT}

	[[ -z "$XML" ]] && while true; do test -f $VMpath/nohup.log && break; done
	expect -c "spawn tail -f $VMpath/nohup.log
		set timeout $VirtInstallTimeOut
		expect {
			{*Domain creation completed.} { exit }
			{*\r} { exp_continue }
			{</domain>} { exit }
		}
	"
	[[ -n "$XML" ]] && {
		#cp $VMpath/nohup.log $VMpath/vm.xml
		sed -n '/^<domain/ {:L /\n<.domain>/! {N; b L}; p; q}' $VMpath/nohup.log >$VMpath/vm.xml
		virsh domxml-to-native qemu-argv $VMpath/vm.xml | tee $VMpath/qemu-argv
		exit
	}

	if [[ "$NOAUTO" = yes ]]; then
		expect -c '
			set timeout 10
			spawn virsh console '"$vmname"'
			expect {
				timeout {
					send_user "\n\n{VM:INFO} exiting from console...\n"
					exit 0
				}
				exp_continue
			}
		'
		if [[ -n "$VNCPUT_AFTER_INSTALL" ]]; then
			vm vnc "$vmname" -put "$VNCPUT_AFTER_INSTALL"
		else
			vm vnc "$vmname" -get
		fi

		echo -e "{VM:INFO} vnc info:"
		vm vnc $vmname
	else
		if grep -i -q freebsd <<<"$Distro"; then
			echo -e "{VM:INFO} waiting console info ..."
			SHUTDOWN=$GenerateImage LANG=C expect -c '
				set intc 0
				set timeout 16
				spawn virsh console '"$vmname"'
				trap {
					send_user "You pressed Ctrl+C [incr intc]/8\n"
					if {$intc >= 8} {
						interact; exit
					}
				} SIGINT

				expect {Escape character is ^] (Ctrl + ])} {}
				expect {
					"????:" {}
					timeout {
						send_user "\n\n{VM:INFO} waiting console timeout ...\n"
						exit 128
					}
				}

				set timeout -1
				expect "*login:" {
					send "root\n"
				}
				expect "*:~ #" {
					send {hostname '"${vmname}"';
echo hostname='"${vmname}"' >>/etc/rc.conf;
service syslogd reload;
echo sshd_enable=\"YES\" >>/etc/rc.conf;
printf "PermitRootLogin yes\nPasswordAuthentication yes\n" >>/etc/ssh/sshd_config;
grep "^[^#]" /etc/rc.conf /etc/ssh/sshd_config;
pw useradd foo -G wheel;
echo '"$defaultPasswd"' | pw usermod foo -h 0;
echo '"$defaultPasswd"' | pw usermod root -h 0;
/etc/rc.d/sshd start;}
					send "\r"
					send "echo _END_\r"
				}
				expect "_END_" { exit 0 }
			'
			if [[ $? = 128 ]]; then
				Console=no
				echo -e "{VM:INFO} waiting vnc login: prompt ..."
				Scrn=$(vm vnc "$vmname" -get)
				if [[ -n "$Scrn" && "$Scrn" != "Guest has not initialized the display"* ]]; then
					vm vnc "$vmname" -get
					while ! grep "^login:" < <(vm vnc "$vmname" -get); do sleep 10; done
					vm vnc "$vmname" -putln root
					vm vnc "$vmname" -putln "hostname ${vmname}" \
						-putln "echo 'hostname=\"${vmname}\"' >>/etc/rc.conf" \
						-putln "service syslogd reload" \
						-putln "echo 'sshd_enable=\"YES\"' >>/etc/rc.conf" \
						-putln "printf 'PermitRootLogin yes\\nPasswordAuthentication yes\\n' >>/etc/ssh/sshd_config" \
						-putln "grep '^[^#]' /etc/rc.conf" \
						-putln "grep '^[^#]' /etc/ssh/sshd_config"
					timeout 5 vm vnc "$vmname" -get
					vm vnc "$vmname" -putln "pw useradd foo -G wheel" \
						-putln "passwd foo" -put "" -putln "$defaultPasswd" -put "" -putln "$defaultPasswd" \
						-putln "passwd root" -put "" -putln "$defaultPasswd" -put "" -putln "$defaultPasswd" \
						-putln "/etc/rc.d/sshd start"
					timeout 5 vm vnc "$vmname" -get
				else
					vm vnc "$vmname" -get
					echo "{VM:ERR} Both Guest's console and vnc are not available."
					exit 1
				fi
			fi

			read _vmaddr < <(vmifaddr "$vmname")
			if port_available "$_vmaddr" 22; then
				expect -c "
					spawn ssh-copy-id -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no root@$_vmaddr
					expect -re Password.for.*: {send \"$defaultPasswd\\r\"}
					expect eof
				"
			fi
			[[ "$INTERACT" != no ]] && {
				vmlogin $vmname
			}
		else
			trap - SIGINT
			for ((i=0; i<31; i++)); do
				INTERACT=$INTERACT SHUTDOWN=$GenerateImage LANG=C expect -c '
					set intc 0
					set timeout -1
					spawn virsh console '"$vmname"'
					trap {
						send_user "You pressed Ctrl+C [incr intc]/8\n"
						if {$intc >= 8} {
							interact; exit
						}
					} SIGINT
					expect {
						"error: failed to get domain" {
							send "\r"
							puts $expect_out(buffer)
							exit 6
						}
						"error: internal error: character device console0 is not using a PTY" {
							send "\r"
							puts $expect_out(buffer)
							exit 1
						}
						"* login:" { send "root\r" }
					}
					expect "Password:" {
						send "'"$defaultPasswd"'\r"
						send "\r\r\r\r\r\r"
						expect {
							"* ~\]#" {}
							":~#" {}
							"Login incorrect" {
								if {$env(INTERACT) == "no"} { exit 0 }
								interact; exit 0
							}
						}
						if {$env(SHUTDOWN) == "yes"} {
							send {while ps axf|grep -A1 "/var/lib/cloud/instance/scripts/runcm[d]"; do echo "{VM:INFO}: cloud-init scirpt is still running .."; sleep 10; done; poweroff}
							send "\r\n"
							expect "Restarting system" { exit 0 }
						}

						send {while ps axf|grep -A1 "/var/lib/cloud/instance/scripts/runcm[d]"; do echo "{VM:INFO}: cloud-init scirpt is still running .."; sleep 10; done; echo "~~~~~~~~ no cloud-init or cloud-init done ~~~~~~~~"\d}
						send "\r\n"
						expect {
							"or cloud-init done ~~~~~~~~d" {send "\r\r# Now you can take over the keyboard\r\r"}
							"Cloud-init*finished" {send "\r\r# Now you can take over the keyboard\r\r"}
							"* login:" {
								send "root\r"
								expect "Password:" {
									send "'"$defaultPasswd"'\r"
									send "\r\r# Now you can take over the keyboard\r\r"
								}
							}
						}
						send "# and your are in console, Ctr + ] to exit \r"
						send "\r\r"
					}

					if {$env(INTERACT) == "no"} { exit 0 }
					interact; exit
				'
				ReturnCode=$?
				[[ $ReturnCode = 0 || $ReturnCode = 255 ]] && break
				[[ $ReturnCode = 127 ]] && { virsh start $vmname 2>&1 | sed 's/error: //'; continue; }
				sleep 2
			done

			echo -e "\n{VM:INFO} Quit from expect -c 'spawn virsh console $vmname'"
			[[ "$(vmstat $vmname)" = running* ]] || { vm start $vmname; }

			[[ "$RESTRAINT" = yes ]] && {
				_pkglist="restraint-rhts  beakerlib"
				vm exec -v $vmname -- bash -c "rpm -q $_pkglist || { yum install -y $_pkglist && systemctl start restraintd; }; systemctl status restraintd"
			}

			[[ -f "$cloudinitiso" && "$iso_bus_type" != *=usb ]] && {
				echo -e "\n{VM:INFO} eject iso ${cloudinitiso##*/} from $vmname"
				virsh change-media $vmname $cloudinitiso --eject 2>/dev/null
			}
			[[ "$(vmstat $vmname)" = running* ]] || { vm start $vmname; }
		fi
	fi
elif [[ "$InstallType" = pxe ]]; then
	imagefile=$VMpath/${vmname}.qcow2
	diskOpt=path=${imagefile},bus=virtio,size=${DSIZE}
	if [[ "$DISKLESS" = yes ]]; then
		diskOpt=none
	else
		qemu-img create -f qcow2 ${imagefile} ${DSIZE}G
	fi

	echo -e "{VM:INFO} creating VM from pxe"
	run -as=$VMUSER touch $VMpath/.kiss-vm

	ls -l ${imagefile}

	BOOT_DISK_OPT=
	if [[ -z "$NVME_BOOT" ]]; then
		BOOT_DISK_OPT="--disk $diskOpt"
	else
		[[ "$DISKLESS" != yes ]] && {
			setfacl -mu:${QEMU_USER}:rwx -mg:${QEMU_USER}:rwx $imagefile
			chcon system_u:object_r:qemu_var_run_t:s0 $imagefile #system_u:object_r:virt_cache_t:s0 also works
			QEMU_OPTS+=("--qemu-commandline=-drive file=$imagefile,format=qcow2,if=none,id=NVME0 -device nvme,drive=NVME0,serial=nvme-0,bootindex=0")
		}
	fi

	run -debug -nohup unbuffer virt-install --connect=qemu:///system $virtualizationOption --accelerate $XML "${QEMU_OPTS[@]}" "${QEMU_ENV[@]}" \
	  "${VIRT_INSTALL_OPTS[@]}" \
	  $OS_VARIANT_OPT \
	  --name $vmname \
	  --pxe \
	  $BOOT_DISK_OPT \
	  $MACHINE_OPT \
	  "${BOOT_OPTS[@]}" \
	  --vcpus ${VCPUS} \
	  ${ARCH_OPT} \
	  $MEM_OPTS \
	  ${NETWORK_OPTS} \
	  "${HOST_DEV_OPTS[@]}" \
	  $VTPM_OPT \
	  ${VIDEO_OPT} \
	  ${SOUND_OPT} \
	  --noautoconsole --wait=-1 \
	  ${GRAPHICS_OPT}

	[[ -z "$XML" ]] && while true; do test -s $VMpath/nohup.log && break; done
	expect -c "spawn tail -f $VMpath/nohup.log
		set timeout $VirtInstallTimeOut
		expect {
			{Waiting for the installation to complete} { exit }
			{*\r} { exp_continue }
			{</domain>} { exit }
		}
	"
	[[ -n "$XML" ]] && {
		#cp $VMpath/nohup.log $VMpath/vm.xml
		sed -n '/^<domain/ {:L /\n<.domain>/! {N; b L}; p; q}' $VMpath/nohup.log >$VMpath/vm.xml
		virsh domxml-to-native qemu-argv $VMpath/vm.xml | tee $VMpath/qemu-argv
		exit
	}

	sleep 1
	vm vnc $vmname -get

	if [[ -n $DISPLAY ]]; then
		run -debug -nohup=/dev/null virt-viewer -sv $vmname
		echo -e "\n{VM:INFO} pxe guest $vmname booting ..."
	else
		echo -e "\n{VM:INFO} please connect vnc to continue/complete the install:"
		for vncaddr in $(vmvncproc $vmname); do
			echo -e "  $ vncviewer $vncaddr    #from remote"
		done
	fi

	if [[ "$NOAUTO" = yes ]]; then
		echo -e "{VM:INFO} waiting pxe boot/menu: prompt ..."
		for ((i=0; i<60; i++)) do grep -iq "pxe boot menu" < <(vm vnc "$vmname" -get) && break; sleep 1; done
		vm vnc $vmname -put=key:tab -put=key:esc
	else
		if [[ -n "${VNCWAIT_AFTER_INSTALL[*]}" ]]; then
			for pat_msg_timo in "${VNCWAIT_AFTER_INSTALL[@]}"; do
				IFS=, read _pattern _msgs _timo <<<"${pat_msg_timo}"
				echo -e "\n{VM:INFO} vncwait $_pattern ..."
				vm vnc $vmname -get
				for ((i=0; i<${_timo:-60}; i++)) do
					sleep 1; vm vnc "$vmname" -get | GREP_COLORS='ms=01;30;46' grep -i --color "$_pattern" && break
				done && for _send in $_msgs; do vm vnc "$vmname" -put "$_send"; done
				sleep 2
			done
		else
			echo -e "{VM:INFO} waiting pxe boot/menu: prompt ..."
			for ((i=0; i<60; i++)) do grep -iq "pxe boot menu" < <(vm vnc "$vmname" -get) && break; sleep 1; done
			vm vnc $vmname -put=key:enter
		fi
	fi

	exit 0
elif [[ "$InstallType" = cdrom ]]; then
	[[ -f $Isourl ]] && Isourl=file://$(readlink -f ${Isourl})
	isofilename=${Isourl##*/}
	isofilepath=$VMpath/$isofilename

	echo "{VM:INFO} downloading iso file of $Distro to $isofilepath ..."
	if [[ $Isourl != file:///* ]]; then
		if [[ -n "$SAVE_IMAGE" ]]; then
			curl_download_x ${DownloadImagePath}/${isofilename} $Isourl
			[[ "$DOWNLOAD_ONLY" = yes ]] && {
				ls -l ${DownloadImagePath}/${isofilename}
				exit 0
			}
			cp -v ${DownloadImagePath}/${isofilename} $isofilepath
			#fixme: ^^ performance improve?
		else
			curl_download_x $isofilepath $Isourl
		fi
	else
		cp -v -f ${Isourl#file://} $isofilepath
		#fixme: ^^ performance improve?
	fi
	[[ -f ${isofilepath} ]] || exit 1
	ls -lhZ ${isofilepath}

	imagefile=$VMpath/${vmname}.qcow2
	qemu-img create -f qcow2 ${imagefile} ${DSIZE}G

	echo -e "{VM:INFO} creating VM install from cdrom($isofilepath)"
	run -as=$VMUSER touch $VMpath/.kiss-vm

	ls -lhZ ${imagefile}

	if [[ "$WIN_AUTO" = yes ]]; then
		run -as=$VMUSER touch $VMpath/ansf-usb.image
		WIN_USER=${WIN_USER:-Administrator}
		WIN_PASS=${WIN_PASS:-${defaultWindowsPasswd}}
		if [[ -z "$WIN_WIM_IMAGE_INDEX" ]]; then
			WIN_WIM_IMAGE_INDEX=4
			[[ "$VM_OS_VARIANT" = win10 || "${Distro,,}" =~ (win|windows-?)1[01] ]] && {
				WIN_WIM_IMAGE_INDEX=1; }
		fi
		WIN_WIM_IMAGE_INDEX_OPT="--wim-index=$WIN_WIM_IMAGE_INDEX"
		if [[ "$DFS" = yes && -z "$DFS_TARGET" ]]; then
			make-samba-server.sh --users=$WIN_USER,smbfoo,smbbar \
				--passwd=$WIN_PASS --group=${WIN_DOMAIN//./}
			DFS_TARGET=$HOSTNAME:pub
			WIN_DFS_TARGET_OPT="--dfs-target=$DFS_TARGET"
		fi
		[[ -n "$WIN_MAC_EXT" ]] && WIN_MAC_OPTS+=(--mac-ext=$WIN_MAC_EXT)
		[[ -n "$WIN_MAC_INT" ]] && WIN_MAC_OPTS+=(--mac-int=$WIN_MAC_INT)
		[[ -n "$WIN_STATIC_IP_EXT" ]] && WIN_STATIC_IP_OPTS+=(--static-ip-ext=$WIN_STATIC_IP_EXT)
		[[ -n "$WIN_STATIC_IP_INT" ]] && WIN_STATIC_IP_OPTS+=(--static-ip-int=$WIN_STATIC_IP_INT)
		#WIN_OpenSSH_OPT
		#WIN_VirtioDrv_OPT
		#WIN_LOCALE_OPT
		#WIN_KEY_OPT
		#WIN_DOMAIN_OPT
		#WIN_AD_FOREST_LEVEL_OPT
		#WIN_AD_DOMAIN_LEVEL_OPT
		#WIN_PARENT_DOMAIN_OPT
		#WIN_PARENT_IP_OPT
		#WIN_KDC_OPT
		#WIN_DL_URL_OPTS+
		#WIN_RUN_CMD_OPTS+
		#WIN_RUN_POST_CMD_OPTS+
		if [[ -z "$WIN_HOSTNAME" ]]; then
			WIN_HOSTNAME=${vmname,,}
			WIN_HOSTNAME=${WIN_HOSTNAME#${VMUSER}-};
			WIN_HOSTNAME=$(echo ${WIN_HOSTNAME}|sed -r 's/windows(-server)?-?/win/')
			[[ "${#WIN_HOSTNAME}" -gt 15 ]] && { WIN_HOSTNAME=${WIN_HOSTNAME:0:15}; }
		fi
		WIN_HOSTNAME_OPT="--hostname=${WIN_HOSTNAME}"
		case "${BOOT_OPTS[*]}" in (*uefi*|*firmware=efi*) WIN_UEFI_OPT="--uefi";; esac
		case ${WIN_TEMPLATE} in
		base)
		    run -debug answer-file-generator.sh $WIN_HOSTNAME_OPT $WIN_DOMAIN_OPT $WIN_KEY_OPT \
			${WIN_UEFI_OPT} ${WIN_LOCALE_OPT} ${WIN_WIM_IMAGE_INDEX_OPT} \
			-u $WIN_USER -p "$WIN_PASS" "${WIN_OpenSSH_OPT[@]}" "${WIN_VirtioDrv_OPT[@]}" \
			"${WIN_DL_URL_OPTS[@]}" "${WIN_RUN_CMD_OPTS[@]}" "${WIN_RUN_POST_CMD_OPTS[@]}" \
			"${WIN_STATIC_IP_OPTS[@]}" "${WIN_MAC_OPTS[@]}" \
			--temp=${WIN_TEMPLATE} --path=$VMpath/ansf-usb.image;;
		cifs-nfs)
		    run -debug answer-file-generator.sh $WIN_HOSTNAME_OPT $WIN_DOMAIN_OPT $WIN_KEY_OPT \
			${WIN_UEFI_OPT} ${WIN_LOCALE_OPT} ${WIN_WIM_IMAGE_INDEX_OPT} \
			-u $WIN_USER -p "$WIN_PASS" "${WIN_OpenSSH_OPT[@]}" "${WIN_VirtioDrv_OPT[@]}" \
			${WIN_KDC_OPT} ${WIN_DFS_TARGET_OPT} \
			"${WIN_DL_URL_OPTS[@]}" "${WIN_RUN_CMD_OPTS[@]}" "${WIN_RUN_POST_CMD_OPTS[@]}" \
			"${WIN_STATIC_IP_OPTS[@]}" "${WIN_MAC_OPTS[@]}" \
			--temp=${WIN_TEMPLATE} --path=$VMpath/ansf-usb.image;;
		addsdomain|addsforest)
		    run -debug answer-file-generator.sh $WIN_HOSTNAME_OPT $WIN_DOMAIN_OPT $WIN_KEY_OPT \
			${WIN_UEFI_OPT} ${WIN_LOCALE_OPT} ${WIN_WIM_IMAGE_INDEX_OPT} \
			-u $WIN_USER -p "$WIN_PASS" "${WIN_OpenSSH_OPT[@]}" "${WIN_VirtioDrv_OPT[@]}" \
			${WIN_PARENT_DOMAIN_OPT} ${WIN_PARENT_IP_OPT} \
			${WIN_AD_DOMAIN_LEVEL_OPT} ${WIN_AD_FOREST_LEVEL_OPT} \
			"${WIN_DL_URL_OPTS[@]}" "${WIN_RUN_CMD_OPTS[@]}" "${WIN_RUN_POST_CMD_OPTS[@]}" \
			"${WIN_STATIC_IP_OPTS[@]}" "${WIN_MAC_OPTS[@]}" \
			--temp=${WIN_TEMPLATE} --path=$VMpath/ansf-usb.image;;
		*)
		    echo "{ERROR} unsupported answerfile template (${WIN_TEMPLATE})" >&2
		    false;;
		esac
		[[ $? -ne 0 ]] && exit 1

		ANSF_DISK_OPT="--disk path=$VMpath/ansf-usb.image,bus=usb,removable=on"
	fi

	BOOT_DISK_OPT=
	if [[ -z "$NVME_BOOT" ]]; then
		BOOT_DISK_OPT="--disk path=${imagefile},${BOOT_DISK_ATTRS}"
	else
		setfacl -mu:${QEMU_USER}:rwx -mg:${QEMU_USER}:rwx $imagefile
		chcon system_u:object_r:qemu_var_run_t:s0 $imagefile #system_u:object_r:virt_cache_t:s0 also works
		QEMU_OPTS+=("--qemu-commandline=-drive file=$imagefile,format=qcow2,if=none,id=NVME0 -device nvme,drive=NVME0,serial=nvme-0,bootindex=0")
	fi

	run -debug -nohup unbuffer virt-install --connect=qemu:///system $virtualizationOption --accelerate $XML "${QEMU_OPTS[@]}" "${QEMU_ENV[@]}" \
	  "${VIRT_INSTALL_OPTS[@]}" \
	  $OS_VARIANT_OPT \
	  --name $vmname \
	  --cdrom $isofilepath \
	  $BOOT_DISK_OPT \
	  $ANSF_DISK_OPT \
	  $MACHINE_OPT \
	  "${BOOT_OPTS[@]}" \
	  --vcpus ${VCPUS} \
	  ${ARCH_OPT} \
	  $MEM_OPTS \
	  $DISK_OPTS \
	  $NETWORK_OPTS \
	  $CONTROLLER_OPTS \
	  "${HOST_DEV_OPTS[@]}" \
	  $VTPM_OPT \
	  ${VIDEO_OPT} \
	  ${SOUND_OPT} \
	  --noautoconsole --wait=-1 \
	  ${GRAPHICS_OPT}

	[[ -z "$XML" ]] && while true; do test -s $VMpath/nohup.log && break; done
	expect -c "spawn tail -f $VMpath/nohup.log
		set timeout $VirtInstallTimeOut
		expect {
			{Waiting for the installation to complete} { exit }
			{*\r} { exp_continue }
			{</domain>} { exit }
		}
	"
	[[ -n "$XML" ]] && {
		#cp $VMpath/nohup.log $VMpath/vm.xml
		sed -n '/^<domain/ {:L /\n<.domain>/! {N; b L}; p; q}' $VMpath/nohup.log >$VMpath/vm.xml
		virsh domxml-to-native qemu-argv $VMpath/vm.xml | tee $VMpath/qemu-argv
		exit
	}

	vm vnc $vmname -put "key:shift"
	vm vnc $vmname -get | tee $RuntimeTmp/std.log

	if [[ "$WIN_AUTO" = yes ]]; then
		run -tmux=langselect_$vmname 'vmn='"$vmname"'
		for ((i=0; i<32; i++)); do
			screenocr=$(vm vnc $vmn -get)
			case "${screenocr,,}" in
			*lan9*|*langua*|*_jju?_ve*|*t3e1_oot3*)
				echo "$screenocr"
				vm vnc $vmn -put=key:tab -put=key:tab -put=key:tab -put=key:enter
				break;;
			*)
				sleep 5;;
			esac
		done'
		run -tmux=key-ask_$vmname 'sleep 64; vmn='"$vmname"'
		for ((i=0; i<180; i++)); do
			screenocr=$(vm vnc $vmn -get)
			case "${screenocr,,}" in
			*wxxwxxwxx*|*xxxxx?xxxxx*|*xwx?xwx?xwx*)
				echo "$screenocr"
				vm vnc $vmn -put=key:tab -put=key:tab -put=key:tab -put=key:tab -put=key:enter
				break;;
			*)
				sleep 10;;
			esac
		done'
		run -tmux=virtio-win-install_$vmname 'sleep 180; vmn='"$vmname"'; temp='"$WIN_TEMPLATE"'
		pre=no
		for ((i=0; i<1440; i++)); do
			[[ "$temp" != base ]] && break
			screenocr=$(vm vnc $vmn -get)
			case "${screenocr,,}" in
			*v?rt?o?w?n??nstall?done*) break;;
			*stat?c??p*) break;;
			*win7*|*c3_53j3j3__0_e*|*0e3??*53j3e3*_0_e*|*88??o0_8*4j*bj*%i*|*j_ll_%d_r__a_y*)
				[[ "$screenocr" = *==\>*==\>*==\>*==\>?install?virtio-win?driver?...* ]] && {
					vm vnc $vmn -put=key:alt-tab; continue; }
				echo "--------[$(date +%F_%T)]------------------------------------------"
				echo "$screenocr"
				vm vnc $vmn -put=key:tab -put=key:enter
				case $pre in
				(no) pre=win7;;
				(win7) let win7++; ((win7%2)) && vm vnc $vmn -put=key:alt-tab;;
				esac
				;;
			*virtio?win*|*publisher*red?hat*|*install?vir*|*?*nsta*v?*r*|*?ns??ll???rjr?jo*|*lwaystrust*|*==\>*_____*)
				echo "--------[$(date +%F_%T)]------------------------------------------"
				echo "$screenocr"
				vm vnc $vmn -put=key:alt-tab
				vm vnc $vmn -put=key:tab -put=key:tab -put=key:tab -put=key:enter
				case $pre in
				(no) pre=yes;;
				(yes) let yes++; ((yes%2)) && vm vnc $vmn -put=key:alt-tab;;
				esac
				;;
			*)
				case $pre in
				(no)
					case "${screenocr,,}" in
					*[_8][_8]_*ecomm?n?*) vm vnc $vmn -put=key:alt-tab;;
					*) sleep 5;;
					esac
					;;
				(yes)
					let noagain++
					#tabOpts=$(for ((i=0;i<noagain%3;i++)); do echo -n "-put=key:tab "; done)
					#fixme: seems keydown doesnot work as expected
					#vm vnc $vmn -put=keydown:alt $tabOpts -put=keyup:alt
					vm vnc $vmn -put=key:alt-tab
					;;
				esac
				;;
			esac
			vm port-available $vmn 22 &>/dev/null && break
		done'
	fi

	if [[ -n "${VNCWAIT_AFTER_INSTALL[*]}" ]]; then
		for pat_msg_timo in "${VNCWAIT_AFTER_INSTALL[@]}"; do
			IFS=, read _pattern _msgs _timo <<<"${pat_msg_timo}"
			echo -e "\n{VM:INFO} vncwait $_pattern ..."
			vm vnc $vmname -get
			for ((i=0; i<${_timo:-60}; i++)) do
				sleep 1; vm vnc "$vmname" -get | GREP_COLORS='ms=01;30;46' grep -i --color "$_pattern" && break
			done && for _send in $_msgs; do vm vnc "$vmname" -put "$_send"; done
			sleep 2
		done
	fi
	if [[ -n "$VNCPUT_AFTER_INSTALL" ]]; then
		vm vnc "$vmname" -put "$VNCPUT_AFTER_INSTALL"
	fi

	if [[ -n $DISPLAY ]]; then
		run -debug virt-viewer -s -v $vmname |& tee $VMpath/virt-viewer.log
		if grep -iq "server closed the connection" $VMpath/virt-viewer.log; then
			run -debug -nohup=/dev/null virt-viewer -s -v $vmname
			echo -e "\n{VM:INFO} guest $vmname install finished"
		else
			echo -e "\n{VM:INFO} virt-viewer exit, but seems install has not finished; you can run: 'virt-viewer -s $vmname' to finish install later"
		fi
	else
		echo -e "\n{VM:INFO} please connect vnc to continue install:"
		for vncaddr in $(vmvncproc $vmname); do
			echo -e "  $ vncviewer $vncaddr    #from remote"
		done
	fi

	#exit 0
fi
trap - SIGINT SIGQUIT SIGTERM

if ! virsh desc $vmname &>/dev/null; then
	echo -e "\n{VM:ERR} virt-install fail"
	rm -rf $VMpath && rmdir {$VMpath%/*} 2>/dev/null
	exit 1
fi

if [[ "$WAIT" = yes ]]; then
	echo -e "\n{VM:INFO} wait port($WAIT_PORT) of $vmname available ..."
	vm port-available $vmname $WAIT_PORT -w
	[[ $? = 0 && "$WIN_AUTO" = yes ]] && {
		kill_installer_tmux_session ${vmname}
		win-env-file-gen.sh $vmname
	}
fi

#only for Fedora/RHEL/CentOS/RockyLinux
case ${Distro,,} in
fedora*|rhel*|centos*|rocky*)
	for postrepo in "${POST_REPOS[@]}"; do
		_name=
		_url=
		if [[ "$postrepo" =~ ^[^:]+:(https|http|ftp|file):// ]]; then
			read _name _url _ <<<"${postrepo/:/ }"
		elif [[ "$postrepo" =~ ^(https|http|ftp|file):// ]]; then
			_name=repo-$RADOM
			_url=$postrepo
		fi

		[[ -z "$_name" || -z "$_url" ]] && continue

		repofpath=$VMpath/$_name.repo
		cat <<-REPO >$repofpath
		[$_name]
		name=$_name
		baseurl=$_url
		enabled=1
		gpgcheck=0
		skip_if_unavailable=1
		REPO
		vm cpto $vmname $repofpath /etc/yum.repos.d
		rm -f $repofpath
	done
esac

if [[ "$GenerateImage" = yes ]]; then
	run -as=$VMUSER mkdir -p $ImagePath/$Distro
	read _type _dev _target image < <(_vmblklist $vmname '\.(qcow2|qcow|raw)')
	imgfilename=${image##*/}
	imgfilename=${imgfilename#${VMUSER}-}
	newimage=$ImagePath/$Distro/${imgfilename}

	echo -e "\n{VM:INFO} force shutdown $vmname ..."
	virsh destroy $vmname 2>/dev/null
	ls -lh ${image}

	if ! true; then
		echo -e "\n{VM:INFO} copy image $image to ${newimage} ..."
		cp ${image} ${newimage}
	else
		echo -e "\n{VM:INFO} virt-sparsify image $image to ${newimage} ..."
		LIBGUESTFS_BACKEND=direct virt-sparsify --check-tmpdir fail ${image} ${newimage} || {
			ls -lh ${image}
			cp ${image} ${newimage}
			LIBGUESTFS_BACKEND=direct virt-sparsify --in-place ${newimage}
		}
		ls -lh ${image}
		ls -lh ${newimage}
	fi

	echo -e "\n{VM:INFO} virt-sysprep ..."
	ls -lh ${newimage}
	LIBGUESTFS_BACKEND=direct virt-sysprep -a ${newimage}
	ls -lh ${newimage}

	echo -e "\n{VM:INFO} xz compress image ..."
	time xz -z -f -T 0 ${XZ:--6} ${newimage}
	ls -lh ${newimage}.xz

	echo -e "\n{VM:INFO} remove temporary VM $vmname ..."
	_vmdelete $vmname
	exit 0
fi

if [[ "$RM" = yes ]]; then
	_vmdelete $vmname
	exit 0
fi

vm_add_virtiofs_sharedir() {
	local vmname=$1
	local srcdir=$2
	local rtarget=$3
	local target=virtiofs-tag-$rtarget
	local xmlf=${VMpath:-/tmp}/${target}.xml

	cat >${xmlf} <<-EOF
	<filesystem type='mount' accessmode='passthrough'>
		<binary path='/usr/libexec/virtiofsd' xattr='on'/>
		<driver type='virtiofs'/>
		<source dir='$srcdir'/>
		<target dir='$target'/>
	</filesystem>
	EOF
	virsh attach-device $vmname ${xmlf} --persistent
	virsh attach-device $vmname ${xmlf} --live

	local mp=/virtiofs/$rtarget
	vm exec -v $vmname -- mkdir -p $mp
	vm exec -v $vmname -- mount -t virtiofs $target $mp
	vm exec -v $vmname -- mount -t virtiofs
}

if vercmp "$(libvirt_nvr)" ge libvirt-7.9; then
#only for linux virtiofs
[[ ${#SHARE_DIRS[@]} -gt 0 ]] && {
	for idx in "${!SHARE_DIRS[@]}"; do
		read srcdir rtarget _ <<< "${SHARE_DIRS[$idx]//:/ }"
		run -as=$VMUSER mkdir -p $srcdir || continue
		vm_add_virtiofs_sharedir $vmname $srcdir ${rtarget:-tag$idx}
	done
}
else
#only for linux virtiofs, related bug: rhel/fedora 1897708 1897710
[[ ${#SHARE_DIRS[@]} -gt 0 ]] && {
	vm stop $vmname

	for idx in "${!SHARE_DIRS[@]}"; do
		read srcdir rtarget _ <<< "${SHARE_DIRS[$idx]//:/ }"
		rtarget=${rtarget:-tag$idx}
		target=virtiofs-tag-$rtarget
		run -as=$VMUSER mkdir -p $srcdir
		cat >virtiofs.xml <<-EOF
		<filesystem type='mount' accessmode='passthrough'>
			<binary path='/usr/libexec/virtiofsd' xattr='on'/>
			<driver type='virtiofs'/>
			<source dir='$srcdir'/>
			<target dir='$target'/>
		</filesystem>
		EOF
		virsh attach-device $vmname virtiofs.xml --persistent
	done

	vm reboot -w $vmname

	for idx in "${!SHARE_DIRS[@]}"; do
		read _ rtarget _ <<< "${SHARE_DIRS[$idx]//:/ }"
		rtarget=${rtarget:-tag$idx}
		target=virtiofs-tag-$rtarget
		mp=/virtiofs/$rtarget
		vm exec -v $vmname -- mkdir -p $mp
		vm exec -v $vmname -- mount -t virtiofs $target $mp
		vm exec -v $vmname -- mount -t virtiofs
	done
}
fi

if [[ ! -f ~/.ssh/config ]]; then
	cat <<-EOF > ~/.ssh/config
	Host 192.168.*.*
	   StrictHostKeyChecking no
	   UserKnownHostsFile=/dev/null
	   LogLevel ERROR

	Host 172.*.*.*
	   StrictHostKeyChecking no
	   UserKnownHostsFile=/dev/null
	   LogLevel ERROR

	Host 10.*.*.*
	   StrictHostKeyChecking no
	   UserKnownHostsFile=/dev/null
	   LogLevel ERROR
	EOF
	chmod 600 ~/.ssh/config
fi

: <<\COMM
echo -e "\n{VM:INFO} attach test disk ext4.qcow2 and xfs.qcow2:"
qemu-img create -f qcow2 $VMpath/ext4.qcow2 10G
qemu-img create -f qcow2 $VMpath/xfs.qcow2 10G
virsh attach-disk $vmname --subdriver qcow2 --persistent $VMpath/ext4.qcow2 vdb #--current --targetbus usb
virsh attach-disk $vmname --subdriver qcow2 --persistent $VMpath/xfs.qcow2 vdc #--current --targetbus usb
#virsh detach-disk $vmname --persistent vdb
#virsh detach-disk $vmname --persistent vdc

echo -e "  $ virsh console $vmname"
echo -e "  $ ssh foo@$vmname  #password: $defaultPasswd"
read addr < <(vmifaddr $vmname)
[[ -n "$addr" ]] && {
	echo -e "  $ ssh foo@$addr  #password: $defaultPasswd"
}
COMM

#only for linux
[[ -n "$DEFAULT_KERNEL" ]] && {
	vm exec -v $vmname -- uname -r
	vm exec -v $vmname -- grubby --default-kernel
	vm exec -v $vmname -- grubby --default-index
	vm exec -v $vmname -- grubby --info=ALL

	pat=${DEFAULT_KERNEL#kernel-}
	defaultIndex=$(vm exec $vmname -- grubby --default-index)
	expectedIndex=$(vm exec $vmname -- grubby --info=ALL | sed 's/^index=/\n/' |
		awk 'BEGIN{RS=""; FS="\n"} '"/$pat/"'{print $1}')

	if [[ "$defaultIndex" != "$expectedIndex" ]]; then
		vm exec -v $vmname -- grubby --set-default-index=$expectedIndex
		REBOOT=yes
	fi
	if ! vm exec $vmname -- uname -r | grep "$pat"; then
		REBOOT=yes
	fi
}
[[ "$REBOOT" = yes ]] && {
	vm exec -v $vmname -- "reboot; exit"
	read _vmaddr < <(vmifaddr "$vmname")
	until port_available ${_vmaddr} 22; do sleep 1; done
}

[[ "$(vmstat $vmname)" = running* ]] || { vm start $vmname; }
echo -e "\n{VM:INFO} you can try login $vmname again by using:"
echo -e "  $ vm login $vmname          #from host"
for vncaddr in $(vmvncproc $vmname); do
	if [[ "$vncaddr" = localhost* ]]; then
		echo -e "  $ vncviewer $vncaddr    #from localhost"
	else
		echo -e "  $ vncviewer $vncaddr    #from localhost or remote"
	fi
done
exit 0
